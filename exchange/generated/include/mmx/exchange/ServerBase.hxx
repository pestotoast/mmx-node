
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_mmx_exchange_ServerBase_HXX_
#define INCLUDE_mmx_exchange_ServerBase_HXX_

#include <mmx/exchange/package.hxx>
#include <mmx/Block.hxx>
#include <mmx/Transaction.hxx>
#include <mmx/addr_t.hpp>
#include <mmx/exchange/amount_t.hxx>
#include <mmx/exchange/limit_order_t.hxx>
#include <mmx/exchange/matched_order_t.hxx>
#include <mmx/exchange/order_t.hxx>
#include <mmx/exchange/trade_entry_t.hxx>
#include <mmx/exchange/trade_order_t.hxx>
#include <mmx/exchange/trade_pair_t.hxx>
#include <mmx/hash_t.hpp>
#include <mmx/txio_key_t.hxx>
#include <mmx/ulong_fraction_t.hxx>
#include <vnx/TopicPtr.hpp>
#include <vnx/addons/MsgServer.h>


namespace mmx {
namespace exchange {

class ServerBase : public ::vnx::addons::MsgServer {
public:
	
	::vnx::TopicPtr input_blocks = "node.verified_blocks";
	int32_t trade_timeout_ms = 5000;
	std::string node_server = "Node";
	std::string storage_path = "exchange/server/";
	
	typedef ::vnx::addons::MsgServer Super;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	static constexpr uint64_t VNX_TYPE_ID = 0x573a9f3b899c4e1dull;
	
	ServerBase(const std::string& _vnx_name);
	
	vnx::Hash64 get_type_hash() const override;
	std::string get_type_name() const override;
	const vnx::TypeCode* get_type_code() const override;
	
	void read(std::istream& _in) override;
	void write(std::ostream& _out) const override;
	
	template<typename T>
	void accept_generic(T& _visitor) const;
	void accept(vnx::Visitor& _visitor) const override;
	
	vnx::Object to_object() const override;
	void from_object(const vnx::Object& object) override;
	
	vnx::Variant get_field(const std::string& name) const override;
	void set_field(const std::string& name, const vnx::Variant& value) override;
	
	friend std::ostream& operator<<(std::ostream& _out, const ServerBase& _value);
	friend std::istream& operator>>(std::istream& _in, ServerBase& _value);
	
	static const vnx::TypeCode* static_get_type_code();
	static std::shared_ptr<vnx::TypeCode> static_create_type_code();
	
protected:
	using Super::handle;
	
	virtual void execute_async(std::shared_ptr<const ::mmx::Transaction> tx, const vnx::request_id_t& _request_id) = 0;
	void execute_async_return(const vnx::request_id_t& _request_id) const;
	virtual void match_async(const ::mmx::exchange::trade_order_t& order, const vnx::request_id_t& _request_id) const = 0;
	void match_async_return(const vnx::request_id_t& _request_id, const ::mmx::exchange::matched_order_t& _ret_0) const;
	virtual std::vector<::mmx::exchange::trade_pair_t> get_trade_pairs() const = 0;
	virtual std::vector<::mmx::exchange::order_t> get_orders(const ::mmx::exchange::trade_pair_t& pair, const int32_t& limit) const = 0;
	virtual std::vector<::mmx::exchange::trade_entry_t> get_history(const ::mmx::exchange::trade_pair_t& pair, const int32_t& limit) const = 0;
	virtual ::mmx::ulong_fraction_t get_price(const ::mmx::addr_t& want, const ::mmx::exchange::amount_t& have) const = 0;
	virtual ::mmx::ulong_fraction_t get_min_trade(const ::mmx::exchange::trade_pair_t& pair) const = 0;
	virtual void place_async(const uint64_t& client, const ::mmx::exchange::trade_pair_t& pair, const ::mmx::exchange::limit_order_t& order, const vnx::request_id_t& _request_id) const = 0;
	void place_async_return(const vnx::request_id_t& _request_id, const std::vector<::mmx::exchange::order_t>& _ret_0) const;
	virtual void cancel(const uint64_t& client, const std::vector<::mmx::txio_key_t>& orders) = 0;
	virtual void reject(const uint64_t& client, const ::mmx::hash_t& txid) = 0;
	virtual void approve(const uint64_t& client, std::shared_ptr<const ::mmx::Transaction> tx) = 0;
	virtual void ping(const uint64_t& client) const = 0;
	virtual void handle(std::shared_ptr<const ::mmx::Block> _value) {}
	
	void vnx_handle_switch(std::shared_ptr<const vnx::Value> _value) override;
	std::shared_ptr<vnx::Value> vnx_call_switch(std::shared_ptr<const vnx::Value> _method, const vnx::request_id_t& _request_id) override;
	
};

template<typename T>
void ServerBase::accept_generic(T& _visitor) const {
	_visitor.template type_begin<ServerBase>(16);
	_visitor.type_field("port", 0); _visitor.accept(port);
	_visitor.type_field("host", 1); _visitor.accept(host);
	_visitor.type_field("max_connections", 2); _visitor.accept(max_connections);
	_visitor.type_field("listen_queue_size", 3); _visitor.accept(listen_queue_size);
	_visitor.type_field("stats_interval_ms", 4); _visitor.accept(stats_interval_ms);
	_visitor.type_field("connection_timeout_ms", 5); _visitor.accept(connection_timeout_ms);
	_visitor.type_field("send_buffer_size", 6); _visitor.accept(send_buffer_size);
	_visitor.type_field("receive_buffer_size", 7); _visitor.accept(receive_buffer_size);
	_visitor.type_field("tcp_no_delay", 8); _visitor.accept(tcp_no_delay);
	_visitor.type_field("tcp_keepalive", 9); _visitor.accept(tcp_keepalive);
	_visitor.type_field("show_warnings", 10); _visitor.accept(show_warnings);
	_visitor.type_field("max_msg_size", 11); _visitor.accept(max_msg_size);
	_visitor.type_field("input_blocks", 12); _visitor.accept(input_blocks);
	_visitor.type_field("trade_timeout_ms", 13); _visitor.accept(trade_timeout_ms);
	_visitor.type_field("node_server", 14); _visitor.accept(node_server);
	_visitor.type_field("storage_path", 15); _visitor.accept(storage_path);
	_visitor.template type_end<ServerBase>(16);
}


} // namespace mmx
} // namespace exchange


namespace vnx {

} // vnx

#endif // INCLUDE_mmx_exchange_ServerBase_HXX_
