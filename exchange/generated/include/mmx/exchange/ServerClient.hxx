
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_mmx_exchange_Server_CLIENT_HXX_
#define INCLUDE_mmx_exchange_Server_CLIENT_HXX_

#include <vnx/Client.h>
#include <mmx/Block.hxx>
#include <mmx/Transaction.hxx>
#include <mmx/addr_t.hpp>
#include <mmx/exchange/amount_t.hxx>
#include <mmx/exchange/limit_order_t.hxx>
#include <mmx/exchange/matched_order_t.hxx>
#include <mmx/exchange/order_t.hxx>
#include <mmx/exchange/trade_entry_t.hxx>
#include <mmx/exchange/trade_order_t.hxx>
#include <mmx/exchange/trade_pair_t.hxx>
#include <mmx/hash_t.hpp>
#include <mmx/txio_key_t.hxx>
#include <mmx/ulong_fraction_t.hxx>
#include <vnx/TopicPtr.hpp>
#include <vnx/addons/MsgServer.h>


namespace mmx {
namespace exchange {

class ServerClient : public vnx::Client {
public:
	ServerClient(const std::string& service_name);
	
	ServerClient(vnx::Hash64 service_addr);
	
	::vnx::Object vnx_get_config_object();
	
	::vnx::Variant vnx_get_config(const std::string& name = "");
	
	void vnx_set_config_object(const ::vnx::Object& config = ::vnx::Object());
	
	void vnx_set_config_object_async(const ::vnx::Object& config = ::vnx::Object());
	
	void vnx_set_config(const std::string& name = "", const ::vnx::Variant& value = ::vnx::Variant());
	
	void vnx_set_config_async(const std::string& name = "", const ::vnx::Variant& value = ::vnx::Variant());
	
	::vnx::TypeCode vnx_get_type_code();
	
	std::shared_ptr<const ::vnx::ModuleInfo> vnx_get_module_info();
	
	void vnx_restart();
	
	void vnx_restart_async();
	
	void vnx_stop();
	
	void vnx_stop_async();
	
	vnx::bool_t vnx_self_test();
	
	void execute(std::shared_ptr<const ::mmx::Transaction> tx = nullptr);
	
	void execute_async(std::shared_ptr<const ::mmx::Transaction> tx = nullptr);
	
	::mmx::exchange::matched_order_t match(const ::mmx::exchange::trade_order_t& order = ::mmx::exchange::trade_order_t());
	
	std::vector<::mmx::exchange::trade_pair_t> get_trade_pairs();
	
	std::vector<::mmx::exchange::order_t> get_orders(const ::mmx::exchange::trade_pair_t& pair = ::mmx::exchange::trade_pair_t(), const int32_t& limit = -1);
	
	std::vector<::mmx::exchange::trade_entry_t> get_history(const ::mmx::exchange::trade_pair_t& pair = ::mmx::exchange::trade_pair_t(), const int32_t& limit = -1);
	
	::mmx::ulong_fraction_t get_price(const ::mmx::addr_t& want = ::mmx::addr_t(), const ::mmx::exchange::amount_t& have = ::mmx::exchange::amount_t());
	
	::mmx::ulong_fraction_t get_min_trade(const ::mmx::exchange::trade_pair_t& pair = ::mmx::exchange::trade_pair_t());
	
	std::vector<::mmx::exchange::order_t> place(const uint64_t& client = 0, const ::mmx::exchange::trade_pair_t& pair = ::mmx::exchange::trade_pair_t(), const ::mmx::exchange::limit_order_t& order = ::mmx::exchange::limit_order_t());
	
	void cancel(const uint64_t& client = 0, const std::vector<::mmx::txio_key_t>& orders = {});
	
	void cancel_async(const uint64_t& client = 0, const std::vector<::mmx::txio_key_t>& orders = {});
	
	void reject(const uint64_t& client = 0, const ::mmx::hash_t& txid = ::mmx::hash_t());
	
	void reject_async(const uint64_t& client = 0, const ::mmx::hash_t& txid = ::mmx::hash_t());
	
	void approve(const uint64_t& client = 0, std::shared_ptr<const ::mmx::Transaction> tx = nullptr);
	
	void approve_async(const uint64_t& client = 0, std::shared_ptr<const ::mmx::Transaction> tx = nullptr);
	
	void ping(const uint64_t& client = 0);
	
	void ping_async(const uint64_t& client = 0);
	
};


} // namespace mmx
} // namespace exchange

#endif // INCLUDE_mmx_exchange_Server_CLIENT_HXX_
