
// AUTO GENERATED by vnxcppcodegen

#include <mmx/exchange/package.hxx>
#include <mmx/exchange/ClientClient.hxx>
#include <mmx/Block.hxx>
#include <mmx/Transaction.hxx>
#include <mmx/addr_t.hpp>
#include <mmx/exchange/Client_approve.hxx>
#include <mmx/exchange/Client_approve_return.hxx>
#include <mmx/exchange/Client_execute.hxx>
#include <mmx/exchange/Client_execute_return.hxx>
#include <mmx/exchange/Client_get_all_offers.hxx>
#include <mmx/exchange/Client_get_all_offers_return.hxx>
#include <mmx/exchange/Client_get_offer.hxx>
#include <mmx/exchange/Client_get_offer_return.hxx>
#include <mmx/exchange/Client_get_order.hxx>
#include <mmx/exchange/Client_get_order_return.hxx>
#include <mmx/exchange/Client_get_orders.hxx>
#include <mmx/exchange/Client_get_orders_return.hxx>
#include <mmx/exchange/Client_get_price.hxx>
#include <mmx/exchange/Client_get_price_return.hxx>
#include <mmx/exchange/Client_get_servers.hxx>
#include <mmx/exchange/Client_get_servers_return.hxx>
#include <mmx/exchange/Client_make_offer.hxx>
#include <mmx/exchange/Client_make_offer_return.hxx>
#include <mmx/exchange/Client_make_trade.hxx>
#include <mmx/exchange/Client_make_trade_return.hxx>
#include <mmx/exchange/Client_match.hxx>
#include <mmx/exchange/Client_match_return.hxx>
#include <mmx/exchange/Client_place.hxx>
#include <mmx/exchange/Client_place_return.hxx>
#include <mmx/exchange/OrderBundle.hxx>
#include <mmx/exchange/amount_t.hxx>
#include <mmx/exchange/open_order_t.hxx>
#include <mmx/exchange/order_t.hxx>
#include <mmx/exchange/trade_order_t.hxx>
#include <mmx/exchange/trade_pair_t.hxx>
#include <mmx/hash_t.hpp>
#include <mmx/txio_key_t.hxx>
#include <mmx/ulong_fraction_t.hxx>
#include <vnx/ModuleInterface_vnx_get_config.hxx>
#include <vnx/ModuleInterface_vnx_get_config_return.hxx>
#include <vnx/ModuleInterface_vnx_get_config_object.hxx>
#include <vnx/ModuleInterface_vnx_get_config_object_return.hxx>
#include <vnx/ModuleInterface_vnx_get_module_info.hxx>
#include <vnx/ModuleInterface_vnx_get_module_info_return.hxx>
#include <vnx/ModuleInterface_vnx_get_type_code.hxx>
#include <vnx/ModuleInterface_vnx_get_type_code_return.hxx>
#include <vnx/ModuleInterface_vnx_restart.hxx>
#include <vnx/ModuleInterface_vnx_restart_return.hxx>
#include <vnx/ModuleInterface_vnx_self_test.hxx>
#include <vnx/ModuleInterface_vnx_self_test_return.hxx>
#include <vnx/ModuleInterface_vnx_set_config.hxx>
#include <vnx/ModuleInterface_vnx_set_config_return.hxx>
#include <vnx/ModuleInterface_vnx_set_config_object.hxx>
#include <vnx/ModuleInterface_vnx_set_config_object_return.hxx>
#include <vnx/ModuleInterface_vnx_stop.hxx>
#include <vnx/ModuleInterface_vnx_stop_return.hxx>
#include <vnx/TopicPtr.hpp>
#include <vnx/addons/MsgServer.h>

#include <vnx/Generic.hxx>
#include <vnx/vnx.h>


namespace mmx {
namespace exchange {

ClientClient::ClientClient(const std::string& service_name)
	:	Client::Client(vnx::Hash64(service_name))
{
}

ClientClient::ClientClient(vnx::Hash64 service_addr)
	:	Client::Client(service_addr)
{
}

::vnx::Object ClientClient::vnx_get_config_object() {
	auto _method = ::vnx::ModuleInterface_vnx_get_config_object::create();
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_get_config_object_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::vnx::Object>();
	} else {
		throw std::logic_error("ClientClient: invalid return value");
	}
}

::vnx::Variant ClientClient::vnx_get_config(const std::string& name) {
	auto _method = ::vnx::ModuleInterface_vnx_get_config::create();
	_method->name = name;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_get_config_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::vnx::Variant>();
	} else {
		throw std::logic_error("ClientClient: invalid return value");
	}
}

void ClientClient::vnx_set_config_object(const ::vnx::Object& config) {
	auto _method = ::vnx::ModuleInterface_vnx_set_config_object::create();
	_method->config = config;
	vnx_request(_method, false);
}

void ClientClient::vnx_set_config_object_async(const ::vnx::Object& config) {
	auto _method = ::vnx::ModuleInterface_vnx_set_config_object::create();
	_method->config = config;
	vnx_request(_method, true);
}

void ClientClient::vnx_set_config(const std::string& name, const ::vnx::Variant& value) {
	auto _method = ::vnx::ModuleInterface_vnx_set_config::create();
	_method->name = name;
	_method->value = value;
	vnx_request(_method, false);
}

void ClientClient::vnx_set_config_async(const std::string& name, const ::vnx::Variant& value) {
	auto _method = ::vnx::ModuleInterface_vnx_set_config::create();
	_method->name = name;
	_method->value = value;
	vnx_request(_method, true);
}

::vnx::TypeCode ClientClient::vnx_get_type_code() {
	auto _method = ::vnx::ModuleInterface_vnx_get_type_code::create();
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_get_type_code_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::vnx::TypeCode>();
	} else {
		throw std::logic_error("ClientClient: invalid return value");
	}
}

std::shared_ptr<const ::vnx::ModuleInfo> ClientClient::vnx_get_module_info() {
	auto _method = ::vnx::ModuleInterface_vnx_get_module_info::create();
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_get_module_info_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::vnx::ModuleInfo>>();
	} else {
		throw std::logic_error("ClientClient: invalid return value");
	}
}

void ClientClient::vnx_restart() {
	auto _method = ::vnx::ModuleInterface_vnx_restart::create();
	vnx_request(_method, false);
}

void ClientClient::vnx_restart_async() {
	auto _method = ::vnx::ModuleInterface_vnx_restart::create();
	vnx_request(_method, true);
}

void ClientClient::vnx_stop() {
	auto _method = ::vnx::ModuleInterface_vnx_stop::create();
	vnx_request(_method, false);
}

void ClientClient::vnx_stop_async() {
	auto _method = ::vnx::ModuleInterface_vnx_stop::create();
	vnx_request(_method, true);
}

vnx::bool_t ClientClient::vnx_self_test() {
	auto _method = ::vnx::ModuleInterface_vnx_self_test::create();
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_self_test_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<vnx::bool_t>();
	} else {
		throw std::logic_error("ClientClient: invalid return value");
	}
}

std::vector<std::string> ClientClient::get_servers() {
	auto _method = ::mmx::exchange::Client_get_servers::create();
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::exchange::Client_get_servers_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<std::string>>();
	} else {
		throw std::logic_error("ClientClient: invalid return value");
	}
}

void ClientClient::execute(const std::string& server, const uint32_t& wallet, std::shared_ptr<const ::mmx::Transaction> tx) {
	auto _method = ::mmx::exchange::Client_execute::create();
	_method->server = server;
	_method->wallet = wallet;
	_method->tx = tx;
	vnx_request(_method, false);
}

void ClientClient::execute_async(const std::string& server, const uint32_t& wallet, std::shared_ptr<const ::mmx::Transaction> tx) {
	auto _method = ::mmx::exchange::Client_execute::create();
	_method->server = server;
	_method->wallet = wallet;
	_method->tx = tx;
	vnx_request(_method, true);
}

std::shared_ptr<const ::mmx::Transaction> ClientClient::match(const std::string& server, const ::mmx::exchange::trade_pair_t& pair, const ::mmx::exchange::trade_order_t& order) {
	auto _method = ::mmx::exchange::Client_match::create();
	_method->server = server;
	_method->pair = pair;
	_method->order = order;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::exchange::Client_match_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Transaction>>();
	} else {
		throw std::logic_error("ClientClient: invalid return value");
	}
}

std::vector<::mmx::exchange::order_t> ClientClient::get_orders(const std::string& server, const ::mmx::exchange::trade_pair_t& pair) {
	auto _method = ::mmx::exchange::Client_get_orders::create();
	_method->server = server;
	_method->pair = pair;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::exchange::Client_get_orders_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<::mmx::exchange::order_t>>();
	} else {
		throw std::logic_error("ClientClient: invalid return value");
	}
}

::mmx::ulong_fraction_t ClientClient::get_price(const std::string& server, const ::mmx::addr_t& want, const ::mmx::exchange::amount_t& have) {
	auto _method = ::mmx::exchange::Client_get_price::create();
	_method->server = server;
	_method->want = want;
	_method->have = have;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::exchange::Client_get_price_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<::mmx::ulong_fraction_t>();
	} else {
		throw std::logic_error("ClientClient: invalid return value");
	}
}

vnx::optional<::mmx::exchange::open_order_t> ClientClient::get_order(const ::mmx::txio_key_t& key) {
	auto _method = ::mmx::exchange::Client_get_order::create();
	_method->key = key;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::exchange::Client_get_order_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<vnx::optional<::mmx::exchange::open_order_t>>();
	} else {
		throw std::logic_error("ClientClient: invalid return value");
	}
}

std::shared_ptr<const ::mmx::exchange::OrderBundle> ClientClient::get_offer(const uint64_t& id) {
	auto _method = ::mmx::exchange::Client_get_offer::create();
	_method->id = id;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::exchange::Client_get_offer_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::exchange::OrderBundle>>();
	} else {
		throw std::logic_error("ClientClient: invalid return value");
	}
}

std::vector<std::shared_ptr<const ::mmx::exchange::OrderBundle>> ClientClient::get_all_offers() {
	auto _method = ::mmx::exchange::Client_get_all_offers::create();
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::exchange::Client_get_all_offers_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<std::shared_ptr<const ::mmx::exchange::OrderBundle>>>();
	} else {
		throw std::logic_error("ClientClient: invalid return value");
	}
}

std::shared_ptr<const ::mmx::exchange::OrderBundle> ClientClient::make_offer(const uint32_t& wallet, const ::mmx::exchange::trade_pair_t& pair, const uint64_t& bid, const uint64_t& ask) {
	auto _method = ::mmx::exchange::Client_make_offer::create();
	_method->wallet = wallet;
	_method->pair = pair;
	_method->bid = bid;
	_method->ask = ask;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::exchange::Client_make_offer_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::exchange::OrderBundle>>();
	} else {
		throw std::logic_error("ClientClient: invalid return value");
	}
}

std::vector<::mmx::exchange::trade_order_t> ClientClient::make_trade(const uint32_t& wallet, const ::mmx::exchange::trade_pair_t& pair, const uint64_t& bid, const vnx::optional<uint64_t>& ask) {
	auto _method = ::mmx::exchange::Client_make_trade::create();
	_method->wallet = wallet;
	_method->pair = pair;
	_method->bid = bid;
	_method->ask = ask;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::exchange::Client_make_trade_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::vector<::mmx::exchange::trade_order_t>>();
	} else {
		throw std::logic_error("ClientClient: invalid return value");
	}
}

void ClientClient::place(std::shared_ptr<const ::mmx::exchange::OrderBundle> offer) {
	auto _method = ::mmx::exchange::Client_place::create();
	_method->offer = offer;
	vnx_request(_method, false);
}

void ClientClient::place_async(std::shared_ptr<const ::mmx::exchange::OrderBundle> offer) {
	auto _method = ::mmx::exchange::Client_place::create();
	_method->offer = offer;
	vnx_request(_method, true);
}

std::shared_ptr<const ::mmx::Transaction> ClientClient::approve(std::shared_ptr<const ::mmx::Transaction> tx) {
	auto _method = ::mmx::exchange::Client_approve::create();
	_method->tx = tx;
	auto _return_value = vnx_request(_method, false);
	if(auto _result = std::dynamic_pointer_cast<const ::mmx::exchange::Client_approve_return>(_return_value)) {
		return _result->_ret_0;
	} else if(_return_value && !_return_value->is_void()) {
		return _return_value->get_field_by_index(0).to<std::shared_ptr<const ::mmx::Transaction>>();
	} else {
		throw std::logic_error("ClientClient: invalid return value");
	}
}


} // namespace mmx
} // namespace exchange
