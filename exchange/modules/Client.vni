package mmx.exchange;

import mmx.hash_t;
import mmx.addr_t;
import mmx.txio_key_t;
import mmx.Transaction;
import mmx.ulong_fraction_t;

module Client extends vnx.addons.MsgServer {
	
	vnx.TopicPtr input_blocks = "node.verified_blocks";
	
	string node_server = "Node";
	string wallet_server = "Wallet";
	
	map<string, string> server_map;			// [name => address]
	
	
	vector<string> get_servers() const;
	
	@Permission(mmx.permission_e.SPENDING)
	hash_t execute(string server, uint wallet, matched_order_t order) const async;
	
	vector<matched_order_t> match(string server, trade_pair_t pair, vector<trade_order_t> orders) const async;
	
	vector<order_t> get_orders(string server, trade_pair_t pair) const async;
	
	ulong_fraction_t get_price(string server, addr_t want, amount_t have) const async;
	
	
	optional<open_order_t> get_order(txio_key_t key) const;
	
	OfferBundle* get_offer(ulong id) const;
	
	vector<OfferBundle*> get_all_offers() const;
	
	void cancel_offer(ulong id);
	
	void cancel_all();
	
	OfferBundle* make_offer(uint wallet, trade_pair_t pair, ulong bid, ulong ask) const;
	
	vector<trade_order_t> make_trade(uint wallet, trade_pair_t pair, ulong bid, optional<ulong> ask) const;
	
	@Permission(mmx.permission_e.SPENDING)
	void place(OfferBundle* offer);
	
	@Permission(mmx.permission_e.SPENDING)
	mmx.Transaction* approve(mmx.Transaction* tx) const;
	
	void handle(mmx.Block sample);
	
}
