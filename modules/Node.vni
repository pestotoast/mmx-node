package mmx;

module Node implements vnx.addons.HttpComponent {
	
	vnx.TopicPtr input_vdfs = "network.vdfs";
	vnx.TopicPtr input_proof = "network.proof";
	vnx.TopicPtr input_blocks = "network.blocks";
	vnx.TopicPtr input_transactions = "network.transactions";
	vnx.TopicPtr input_timelord_vdfs = "timelord.proofs";
	vnx.TopicPtr input_harvester_proof = "harvester.proof";

	vnx.TopicPtr output_verified_vdfs = "node.verified_vdfs";
	vnx.TopicPtr output_verified_proof = "node.verified_proof";
	vnx.TopicPtr output_verified_blocks = "node.verified_blocks";
	vnx.TopicPtr output_committed_blocks = "node.committed_blocks";
	vnx.TopicPtr output_transactions = "node.transactions";
	vnx.TopicPtr output_interval_request = "timelord.requests";
	vnx.TopicPtr output_timelord_infuse = "timelord.infuse";
	vnx.TopicPtr output_challenges = "harvester.challenges";
	
	int max_queue_ms = 10000;				// [ms]
	int update_interval_ms = 1000;			// [ms]
	int sync_loss_delay = 60;				// when to re-sync if stuck [sec]
	
	uint max_history = 1000;
	uint tx_pool_limit = 1000000;
	uint max_fork_length = 100000;			// to keep in memory at most
	
	uint max_sync_jobs = 64;				// number of parallel requests
	uint num_sync_retries = 3;				// how often to retry when reaching a peak
	uint replay_height = -1;				// to limit reloading from disk and force resync
	
	uint num_vdf_threads = 8;
	uint vdf_check_divider = 10000;			// how many VDFs to verify during sync
	
	int opencl_device = 0;					// device to use for VDF verification (-1 to disable)
	
	bool do_sync = true;
	bool light_mode = false;
	
	string storage_path;
	string router_name = "Router";
	string timelord_name = "TimeLord";
	
	
	@Permission(permission_e.PUBLIC)
	ChainParams* get_params() const;
	
	@Permission(permission_e.PUBLIC)
	uint get_height() const;
	
	@Permission(permission_e.PUBLIC)
	optional<uint> get_synced_height() const;
	
	@Permission(permission_e.PUBLIC)
	Block* get_block(hash_t hash) const;
	
	@Permission(permission_e.PUBLIC)
	Block* get_block_at(uint height) const;
	
	@Permission(permission_e.PUBLIC)
	BlockHeader* get_header(hash_t hash) const;
	
	@Permission(permission_e.PUBLIC)
	BlockHeader* get_header_at(uint height) const;
	
	@Permission(permission_e.PUBLIC)
	optional<hash_t> get_block_hash(uint height) const;
	
	@Permission(permission_e.PUBLIC)
	optional<txo_info_t> get_txo_info(txio_key_t key) const;
	
	@Permission(permission_e.PUBLIC)
	vector<optional<txo_info_t>> get_txo_infos(vector<txio_key_t> keys) const;
	
	@Permission(permission_e.PUBLIC)
	optional<uint> get_tx_height(hash_t id) const;
	
	@Permission(permission_e.PUBLIC)
	vector<hash_t> get_tx_ids_at(uint height) const;
	
	void add_block(Block* block);
	
	void add_transaction(Transaction* tx);
	
	@Permission(permission_e.PUBLIC)
	Transaction* get_transaction(hash_t id) const;
	
	@Permission(permission_e.PUBLIC)
	vector<Transaction*> get_transactions(vector<hash_t> ids) const;
	
	@Permission(permission_e.PUBLIC)
	vector<tx_entry_t> get_history_for(vector<addr_t> addresses, int since) const;
	
	@Permission(permission_e.PUBLIC)
	Contract* get_contract(addr_t address) const;
	
	@Permission(permission_e.PUBLIC)
	ulong get_balance(addr_t address, addr_t contract) const;
	
	@Permission(permission_e.PUBLIC)
	ulong get_total_balance(vector<addr_t> addresses, addr_t contract) const;
	
	@Permission(permission_e.PUBLIC)
	ulong get_total_supply(addr_t contract) const;
	
	@Permission(permission_e.PUBLIC)
	vector<utxo_entry_t> get_utxo_list(vector<addr_t> addresses) const;
	
	@Permission(permission_e.PUBLIC)
	vector<stxo_entry_t> get_stxo_list(vector<addr_t> addresses) const;
	
	void start_sync(bool force);
	
	
	void handle(Block value);
	void handle(Transaction value);
	void handle(ProofOfTime value);
	void handle(ProofResponse value);
	
}
