package mmx;

module Router extends vnx.addons.TcpServer {
	
	vnx.TopicPtr input_vdfs = "timelord.proofs";
	vnx.TopicPtr input_blocks = "node.verified_blocks";
	vnx.TopicPtr input_verified_vdfs = "node.verified_vdfs";
	vnx.TopicPtr input_verified_proof = "node.verified_proof";
	vnx.TopicPtr input_transactions = "node.transactions";
	
	vnx.TopicPtr output_vdfs = "network.vdfs";
	vnx.TopicPtr output_proof = "network.proof";
	vnx.TopicPtr output_blocks = "network.blocks";
	vnx.TopicPtr output_transactions = "network.transactions";
	
	int max_queue_ms = 1000;				// [ms]
	int query_interval_ms = 10000;			// [ms]
	int update_interval_ms = 1000;			// [ms]
	int connect_interval_ms = 10000;		// [ms]
	int fetch_timeout_ms = 10000;			// for fetching data from peers [ms]
	
	uint sync_loss_delay = 60;				// when to re-sync [sec]
	uint discover_interval = 60;			// how often to search for new peers [sec]
	
	uint num_threads = 32;					// for connecting
	uint num_peers_out = 8;					// maximum outgoing connections to synced peers
	
	uint min_sync_peers = 2;				// minimum peers needed for syncing
	uint max_sync_peers = 4;				// maximum peers to check for different blocks
	
	uint max_msg_size = 4194304;			// bytes
	uint max_hash_cache = 1000000;
	
	set<string> seed_peers;
	set<string> block_peers;
	
	string storage_path;
	string node_server = "Node";
	
	
	void discover();
	
	vnx.Hash64 get_id() const;
	
	vector<string> get_peers(uint max_count = 10) const;
	
	vector<string> get_known_peers() const;
	
	vector<string> get_connected_peers() const;
	
	PeerInfo* get_peer_info() const;
	
	vector<Block*> get_blocks_at(uint height) const async;
	
	
	void handle(Block sample);
	void handle(Transaction sample);
	void handle(ProofOfTime sample);
	void handle(ProofResponse sample);
	
}
