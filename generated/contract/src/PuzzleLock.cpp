
// AUTO GENERATED by vnxcppcodegen

#include <mmx/contract/package.hxx>
#include <mmx/contract/PuzzleLock.hxx>
#include <mmx/Contract.hxx>
#include <mmx/addr_t.hpp>
#include <mmx/contract/Locked.hxx>
#include <mmx/hash_t.hpp>
#include <mmx/pubkey_t.hpp>

#include <vnx/vnx.h>


namespace mmx {
namespace contract {


const vnx::Hash64 PuzzleLock::VNX_TYPE_HASH(0xf33097b29a62c755ull);
const vnx::Hash64 PuzzleLock::VNX_CODE_HASH(0xfe6c1a46e53b4771ull);

vnx::Hash64 PuzzleLock::get_type_hash() const {
	return VNX_TYPE_HASH;
}

std::string PuzzleLock::get_type_name() const {
	return "mmx.contract.PuzzleLock";
}

const vnx::TypeCode* PuzzleLock::get_type_code() const {
	return mmx::contract::vnx_native_type_code_PuzzleLock;
}

std::shared_ptr<PuzzleLock> PuzzleLock::create() {
	return std::make_shared<PuzzleLock>();
}

std::shared_ptr<vnx::Value> PuzzleLock::clone() const {
	return std::make_shared<PuzzleLock>(*this);
}

void PuzzleLock::read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code) {
	vnx::read(_in, *this, _type_code, _code);
}

void PuzzleLock::write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const {
	vnx::write(_out, *this, _type_code, _code);
}

void PuzzleLock::accept(vnx::Visitor& _visitor) const {
	const vnx::TypeCode* _type_code = mmx::contract::vnx_native_type_code_PuzzleLock;
	_visitor.type_begin(*_type_code);
	_visitor.type_field(_type_code->fields[0], 0); vnx::accept(_visitor, version);
	_visitor.type_field(_type_code->fields[1], 1); vnx::accept(_visitor, owner);
	_visitor.type_field(_type_code->fields[2], 2); vnx::accept(_visitor, condition);
	_visitor.type_field(_type_code->fields[3], 3); vnx::accept(_visitor, puzzle);
	_visitor.type_field(_type_code->fields[4], 4); vnx::accept(_visitor, target);
	_visitor.type_field(_type_code->fields[5], 5); vnx::accept(_visitor, currency);
	_visitor.type_end(*_type_code);
}

void PuzzleLock::write(std::ostream& _out) const {
	_out << "{\"__type\": \"mmx.contract.PuzzleLock\"";
	_out << ", \"version\": "; vnx::write(_out, version);
	_out << ", \"owner\": "; vnx::write(_out, owner);
	_out << ", \"condition\": "; vnx::write(_out, condition);
	_out << ", \"puzzle\": "; vnx::write(_out, puzzle);
	_out << ", \"target\": "; vnx::write(_out, target);
	_out << ", \"currency\": "; vnx::write(_out, currency);
	_out << "}";
}

void PuzzleLock::read(std::istream& _in) {
	if(auto _json = vnx::read_json(_in)) {
		from_object(_json->to_object());
	}
}

vnx::Object PuzzleLock::to_object() const {
	vnx::Object _object;
	_object["__type"] = "mmx.contract.PuzzleLock";
	_object["version"] = version;
	_object["owner"] = owner;
	_object["condition"] = condition;
	_object["puzzle"] = puzzle;
	_object["target"] = target;
	_object["currency"] = currency;
	return _object;
}

void PuzzleLock::from_object(const vnx::Object& _object) {
	for(const auto& _entry : _object.field) {
		if(_entry.first == "condition") {
			_entry.second.to(condition);
		} else if(_entry.first == "currency") {
			_entry.second.to(currency);
		} else if(_entry.first == "owner") {
			_entry.second.to(owner);
		} else if(_entry.first == "puzzle") {
			_entry.second.to(puzzle);
		} else if(_entry.first == "target") {
			_entry.second.to(target);
		} else if(_entry.first == "version") {
			_entry.second.to(version);
		}
	}
}

vnx::Variant PuzzleLock::get_field(const std::string& _name) const {
	if(_name == "version") {
		return vnx::Variant(version);
	}
	if(_name == "owner") {
		return vnx::Variant(owner);
	}
	if(_name == "condition") {
		return vnx::Variant(condition);
	}
	if(_name == "puzzle") {
		return vnx::Variant(puzzle);
	}
	if(_name == "target") {
		return vnx::Variant(target);
	}
	if(_name == "currency") {
		return vnx::Variant(currency);
	}
	return vnx::Variant();
}

void PuzzleLock::set_field(const std::string& _name, const vnx::Variant& _value) {
	if(_name == "version") {
		_value.to(version);
	} else if(_name == "owner") {
		_value.to(owner);
	} else if(_name == "condition") {
		_value.to(condition);
	} else if(_name == "puzzle") {
		_value.to(puzzle);
	} else if(_name == "target") {
		_value.to(target);
	} else if(_name == "currency") {
		_value.to(currency);
	}
}

/// \private
std::ostream& operator<<(std::ostream& _out, const PuzzleLock& _value) {
	_value.write(_out);
	return _out;
}

/// \private
std::istream& operator>>(std::istream& _in, PuzzleLock& _value) {
	_value.read(_in);
	return _in;
}

const vnx::TypeCode* PuzzleLock::static_get_type_code() {
	const vnx::TypeCode* type_code = vnx::get_type_code(VNX_TYPE_HASH);
	if(!type_code) {
		type_code = vnx::register_type_code(static_create_type_code());
	}
	return type_code;
}

std::shared_ptr<vnx::TypeCode> PuzzleLock::static_create_type_code() {
	auto type_code = std::make_shared<vnx::TypeCode>();
	type_code->name = "mmx.contract.PuzzleLock";
	type_code->type_hash = vnx::Hash64(0xf33097b29a62c755ull);
	type_code->code_hash = vnx::Hash64(0xfe6c1a46e53b4771ull);
	type_code->is_native = true;
	type_code->is_class = true;
	type_code->native_size = sizeof(::mmx::contract::PuzzleLock);
	type_code->parents.resize(2);
	type_code->parents[0] = ::mmx::contract::Locked::static_get_type_code();
	type_code->parents[1] = ::mmx::Contract::static_get_type_code();
	type_code->create_value = []() -> std::shared_ptr<vnx::Value> { return std::make_shared<PuzzleLock>(); };
	type_code->fields.resize(6);
	{
		auto& field = type_code->fields[0];
		field.data_size = 4;
		field.name = "version";
		field.code = {3};
	}
	{
		auto& field = type_code->fields[1];
		field.is_extended = true;
		field.name = "owner";
		field.code = {11, 32, 1};
	}
	{
		auto& field = type_code->fields[2];
		field.is_extended = true;
		field.name = "condition";
		field.code = {16};
	}
	{
		auto& field = type_code->fields[3];
		field.is_extended = true;
		field.name = "puzzle";
		field.code = {16};
	}
	{
		auto& field = type_code->fields[4];
		field.is_extended = true;
		field.name = "target";
		field.code = {11, 32, 1};
	}
	{
		auto& field = type_code->fields[5];
		field.is_extended = true;
		field.name = "currency";
		field.code = {33, 11, 32, 1};
	}
	type_code->build();
	return type_code;
}


} // namespace mmx
} // namespace contract


namespace vnx {

void read(TypeInput& in, ::mmx::contract::PuzzleLock& value, const TypeCode* type_code, const uint16_t* code) {
	if(code) {
		switch(code[0]) {
			case CODE_OBJECT:
			case CODE_ALT_OBJECT: {
				Object tmp;
				vnx::read(in, tmp, type_code, code);
				value.from_object(tmp);
				return;
			}
			case CODE_DYNAMIC:
			case CODE_ALT_DYNAMIC:
				vnx::read_dynamic(in, value);
				return;
		}
	}
	if(!type_code) {
		vnx::skip(in, type_code, code);
		return;
	}
	if(code) {
		switch(code[0]) {
			case CODE_STRUCT: type_code = type_code->depends[code[1]]; break;
			case CODE_ALT_STRUCT: type_code = type_code->depends[vnx::flip_bytes(code[1])]; break;
			default: {
				vnx::skip(in, type_code, code);
				return;
			}
		}
	}
	const char* const _buf = in.read(type_code->total_field_size);
	if(type_code->is_matched) {
		if(const auto* const _field = type_code->field_map[0]) {
			vnx::read_value(_buf + _field->offset, value.version, _field->code.data());
		}
	}
	for(const auto* _field : type_code->ext_fields) {
		switch(_field->native_index) {
			case 1: vnx::read(in, value.owner, type_code, _field->code.data()); break;
			case 2: vnx::read(in, value.condition, type_code, _field->code.data()); break;
			case 3: vnx::read(in, value.puzzle, type_code, _field->code.data()); break;
			case 4: vnx::read(in, value.target, type_code, _field->code.data()); break;
			case 5: vnx::read(in, value.currency, type_code, _field->code.data()); break;
			default: vnx::skip(in, type_code, _field->code.data());
		}
	}
}

void write(TypeOutput& out, const ::mmx::contract::PuzzleLock& value, const TypeCode* type_code, const uint16_t* code) {
	if(code && code[0] == CODE_OBJECT) {
		vnx::write(out, value.to_object(), nullptr, code);
		return;
	}
	if(!type_code || (code && code[0] == CODE_ANY)) {
		type_code = mmx::contract::vnx_native_type_code_PuzzleLock;
		out.write_type_code(type_code);
		vnx::write_class_header<::mmx::contract::PuzzleLock>(out);
	}
	else if(code && code[0] == CODE_STRUCT) {
		type_code = type_code->depends[code[1]];
	}
	char* const _buf = out.write(4);
	vnx::write_value(_buf + 0, value.version);
	vnx::write(out, value.owner, type_code, type_code->fields[1].code.data());
	vnx::write(out, value.condition, type_code, type_code->fields[2].code.data());
	vnx::write(out, value.puzzle, type_code, type_code->fields[3].code.data());
	vnx::write(out, value.target, type_code, type_code->fields[4].code.data());
	vnx::write(out, value.currency, type_code, type_code->fields[5].code.data());
}

void read(std::istream& in, ::mmx::contract::PuzzleLock& value) {
	value.read(in);
}

void write(std::ostream& out, const ::mmx::contract::PuzzleLock& value) {
	value.write(out);
}

void accept(Visitor& visitor, const ::mmx::contract::PuzzleLock& value) {
	value.accept(visitor);
}

} // vnx
