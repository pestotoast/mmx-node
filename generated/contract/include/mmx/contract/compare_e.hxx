
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_mmx_contract_compare_e_HXX_
#define INCLUDE_mmx_contract_compare_e_HXX_

#include <vnx/Type.h>
#include <mmx/contract/package.hxx>


namespace mmx {
namespace contract {

struct MMX_CONTRACT_EXPORT compare_e {
	
	enum enum_t : uint32_t {
		EQUAL = 3913649559l,
		GREATER = 4126259227l,
		GREATER_EQUAL = 3503116463l,
		LESS = 3490079090l,
		LESS_EQUAL = 3291583023l,
		NOT_EQUAL = 4158819481l,
	};
	
	::mmx::contract::compare_e::enum_t value = ::mmx::contract::compare_e::enum_t(0);
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	static constexpr uint64_t VNX_TYPE_ID = 0xe27ffb2535efa133ull;
	
	compare_e() {}
	
	compare_e(const enum_t& _value) { value = _value; }
	compare_e(const ::mmx::contract::compare_e& _other) { value = _other.value; }
	
	vnx::Hash64 get_type_hash() const;
	std::string get_type_name() const;
	const vnx::TypeCode* get_type_code() const;
	
	operator enum_t() const { return value; }
	compare_e& operator=(const enum_t& _value) { value = _value; return *this; }
	compare_e& operator=(const ::mmx::contract::compare_e& _other) { value = _other.value; return *this; }
	
	static std::shared_ptr<compare_e> create();
	std::shared_ptr<compare_e> clone() const;
	
	void read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code);
	void write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const;
	
	void read(std::istream& _in);
	void write(std::ostream& _out) const;
	
	template<typename T>
	void accept_generic(T& _visitor) const;
	void accept(vnx::Visitor& _visitor) const;
	
	vnx::bool_t is_valid() const;
	std::string to_string() const;
	std::string to_string_value() const;
	std::string to_string_value_full() const;
	
	void from_string(const std::string& str);
	void from_string_value(const std::string& name);
	
	vnx::Object to_object() const;
	void from_object(const vnx::Object& object);
	
	vnx::Variant get_field(const std::string& name) const;
	void set_field(const std::string& name, const vnx::Variant& value);
	
	friend std::ostream& operator<<(std::ostream& _out, const compare_e& _value);
	friend std::istream& operator>>(std::istream& _in, compare_e& _value);
	
	static const vnx::TypeCode* static_get_type_code();
	static std::shared_ptr<vnx::TypeCode> static_create_type_code();
	
};

template<typename T>
void compare_e::accept_generic(T& _visitor) const {
	_visitor.template type_begin<compare_e>(1);
	_visitor.type_field("value", 0); _visitor.accept(value);
	_visitor.template type_end<compare_e>(1);
}


} // namespace mmx
} // namespace contract


namespace vnx {

void read(TypeInput& in, ::mmx::contract::compare_e::enum_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void write(TypeOutput& out, const ::mmx::contract::compare_e::enum_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private

template<>
std::string to_string(const ::mmx::contract::compare_e& _value); ///< \private

template<>
std::string to_string_value(const ::mmx::contract::compare_e& _value); ///< \private

template<>
std::string to_string_value_full(const ::mmx::contract::compare_e& _value); ///< \private

template<>
std::string to_string(const ::mmx::contract::compare_e::enum_t& _value); ///< \private

template<>
std::string to_string_value(const ::mmx::contract::compare_e::enum_t& _value); ///< \private

template<>
std::string to_string_value_full(const ::mmx::contract::compare_e::enum_t& _value); ///< \private

template<>
struct is_equivalent<::mmx::contract::compare_e> {
	bool operator()(const uint16_t* code, const TypeCode* type_code);
};

} // vnx

#endif // INCLUDE_mmx_contract_compare_e_HXX_
