
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_mmx_TimeLordRewardsBase_HXX_
#define INCLUDE_mmx_TimeLordRewardsBase_HXX_

#include <mmx/package.hxx>
#include <mmx/ProofOfTime.hxx>
#include <vnx/Module.h>
#include <vnx/TopicPtr.hpp>


namespace mmx {

class MMX_EXPORT TimeLordRewardsBase : public ::vnx::Module {
public:
	
	::vnx::TopicPtr input_vdfs = "node.verified_vdfs";
	uint32_t wallet_index = 0;
	uint32_t reward_divider = 60;
	uint64_t reward = 100000;
	std::string wallet_server = "Wallet";
	
	typedef ::vnx::Module Super;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	static constexpr uint64_t VNX_TYPE_ID = 0xa21363e9b58e1cbaull;
	
	TimeLordRewardsBase(const std::string& _vnx_name);
	
	vnx::Hash64 get_type_hash() const override;
	std::string get_type_name() const override;
	const vnx::TypeCode* get_type_code() const override;
	
	void read(std::istream& _in) override;
	void write(std::ostream& _out) const override;
	
	template<typename T>
	void accept_generic(T& _visitor) const;
	void accept(vnx::Visitor& _visitor) const override;
	
	vnx::Object to_object() const override;
	void from_object(const vnx::Object& object) override;
	
	vnx::Variant get_field(const std::string& name) const override;
	void set_field(const std::string& name, const vnx::Variant& value) override;
	
	friend std::ostream& operator<<(std::ostream& _out, const TimeLordRewardsBase& _value);
	friend std::istream& operator>>(std::istream& _in, TimeLordRewardsBase& _value);
	
	static const vnx::TypeCode* static_get_type_code();
	static std::shared_ptr<vnx::TypeCode> static_create_type_code();
	
protected:
	using Super::handle;
	
	virtual void handle(std::shared_ptr<const ::mmx::ProofOfTime> _value) {}
	
	void vnx_handle_switch(std::shared_ptr<const vnx::Value> _value) override;
	std::shared_ptr<vnx::Value> vnx_call_switch(std::shared_ptr<const vnx::Value> _method, const vnx::request_id_t& _request_id) override;
	
};

template<typename T>
void TimeLordRewardsBase::accept_generic(T& _visitor) const {
	_visitor.template type_begin<TimeLordRewardsBase>(5);
	_visitor.type_field("input_vdfs", 0); _visitor.accept(input_vdfs);
	_visitor.type_field("wallet_index", 1); _visitor.accept(wallet_index);
	_visitor.type_field("reward_divider", 2); _visitor.accept(reward_divider);
	_visitor.type_field("reward", 3); _visitor.accept(reward);
	_visitor.type_field("wallet_server", 4); _visitor.accept(wallet_server);
	_visitor.template type_end<TimeLordRewardsBase>(5);
}


} // namespace mmx


namespace vnx {

} // vnx

#endif // INCLUDE_mmx_TimeLordRewardsBase_HXX_
