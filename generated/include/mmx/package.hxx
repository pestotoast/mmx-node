
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_mmx_PACKAGE_HXX_
#define INCLUDE_mmx_PACKAGE_HXX_

#include <vnx/Type.h>

#include <vnx/package.hxx>
#include <vnx/addons/package.hxx>


namespace mmx {


class Block;
class BlockHeader;
class ChainParams;
class Challenge;
class Context;
class Contract;
class FarmInfo;
class FarmerBase;
class Farmer_get_farm_info;
class Farmer_get_farm_info_return;
class Farmer_get_mac_addr;
class Farmer_get_mac_addr_return;
class Farmer_sign_block;
class Farmer_sign_block_return;
class FarmerKeys;
class HarvesterBase;
class Harvester_get_farm_info;
class Harvester_get_farm_info_return;
class Harvester_get_total_bytes;
class Harvester_get_total_bytes_return;
class Harvester_reload;
class Harvester_reload_return;
class IntervalRequest;
class KeyFile;
class NetworkInfo;
class NodeBase;
class Node_add_block;
class Node_add_block_return;
class Node_add_transaction;
class Node_add_transaction_return;
class Node_get_balance;
class Node_get_balance_return;
class Node_get_block;
class Node_get_block_return;
class Node_get_block_at;
class Node_get_block_at_return;
class Node_get_block_hash;
class Node_get_block_hash_return;
class Node_get_contract;
class Node_get_contract_return;
class Node_get_contracts;
class Node_get_contracts_return;
class Node_get_contracts_owned;
class Node_get_contracts_owned_return;
class Node_get_header;
class Node_get_header_return;
class Node_get_header_at;
class Node_get_header_at_return;
class Node_get_height;
class Node_get_height_return;
class Node_get_history_for;
class Node_get_history_for_return;
class Node_get_network_info;
class Node_get_network_info_return;
class Node_get_params;
class Node_get_params_return;
class Node_get_stxo_list;
class Node_get_stxo_list_return;
class Node_get_synced_height;
class Node_get_synced_height_return;
class Node_get_total_balance;
class Node_get_total_balance_return;
class Node_get_total_balances;
class Node_get_total_balances_return;
class Node_get_total_supply;
class Node_get_total_supply_return;
class Node_get_transaction;
class Node_get_transaction_return;
class Node_get_transactions;
class Node_get_transactions_return;
class Node_get_tx_height;
class Node_get_tx_height_return;
class Node_get_tx_ids_at;
class Node_get_tx_ids_at_return;
class Node_get_tx_info;
class Node_get_tx_info_return;
class Node_get_txo_info;
class Node_get_txo_info_return;
class Node_get_txo_infos;
class Node_get_txo_infos_return;
class Node_get_utxo_list;
class Node_get_utxo_list_return;
class Node_start_sync;
class Node_start_sync_return;
class Operation;
class PeerInfo;
class ProofOfSpace;
class ProofOfTime;
class ProofResponse;
class Request;
class Return;
class RouterBase;
class Router_discover;
class Router_discover_return;
class Router_fetch_block_at;
class Router_fetch_block_at_return;
class Router_get_blocks_at;
class Router_get_blocks_at_return;
class Router_get_connected_peers;
class Router_get_connected_peers_return;
class Router_get_farmer_credits;
class Router_get_farmer_credits_return;
class Router_get_id;
class Router_get_id_return;
class Router_get_info;
class Router_get_info_return;
class Router_get_known_peers;
class Router_get_known_peers_return;
class Router_get_peer_info;
class Router_get_peer_info_return;
class Router_get_peers;
class Router_get_peers_return;
class Router_sign_msg;
class Router_sign_msg_return;
class Solution;
class TimeInfusion;
class TimeLordBase;
class TimeLord_stop_vdf;
class TimeLord_stop_vdf_return;
class Transaction;
class TransactionBase;
class WalletBase;
class Wallet_add_account;
class Wallet_add_account_return;
class Wallet_deploy;
class Wallet_deploy_return;
class Wallet_gather_utxos_for;
class Wallet_gather_utxos_for_return;
class Wallet_get_accounts;
class Wallet_get_accounts_return;
class Wallet_get_address;
class Wallet_get_address_return;
class Wallet_get_all_addresses;
class Wallet_get_all_addresses_return;
class Wallet_get_all_farmer_keys;
class Wallet_get_all_farmer_keys_return;
class Wallet_get_balance;
class Wallet_get_balance_return;
class Wallet_get_balances;
class Wallet_get_balances_return;
class Wallet_get_contracts;
class Wallet_get_contracts_return;
class Wallet_get_farmer_keys;
class Wallet_get_farmer_keys_return;
class Wallet_get_history;
class Wallet_get_history_return;
class Wallet_get_master_seed;
class Wallet_get_master_seed_return;
class Wallet_get_reserved_balances;
class Wallet_get_reserved_balances_return;
class Wallet_get_stxo_list;
class Wallet_get_stxo_list_return;
class Wallet_get_stxo_list_for;
class Wallet_get_stxo_list_for_return;
class Wallet_get_utxo_list;
class Wallet_get_utxo_list_return;
class Wallet_get_utxo_list_for;
class Wallet_get_utxo_list_for_return;
class Wallet_mark_spent;
class Wallet_mark_spent_return;
class Wallet_mint;
class Wallet_mint_return;
class Wallet_release;
class Wallet_release_return;
class Wallet_release_all;
class Wallet_release_all_return;
class Wallet_reserve;
class Wallet_reserve_return;
class Wallet_send;
class Wallet_send_return;
class Wallet_send_from;
class Wallet_send_from_return;
class Wallet_sign_msg;
class Wallet_sign_msg_return;
class Wallet_sign_off;
class Wallet_sign_off_return;
class WebAPIBase;
struct account_t;
class addr_t;
class bls_pubkey_t;
class bls_signature_t;
class hash_t;
struct node_info_t;
struct node_type_e;
struct peer_info_t;
struct permission_e;
class pubkey_t;
class signature_t;
class skey_t;
struct spend_options_t;
struct stxo_entry_t;
struct stxo_t;
struct time_segment_t;
struct tx_entry_t;
struct tx_in_t;
class tx_info_t;
struct tx_out_t;
struct tx_type_e;
struct txi_info_t;
struct txio_key_t;
struct txo_info_t;
struct uint_fraction_t;
struct ulong_fraction_t;
struct utxo_entry_t;
struct utxo_t;

extern const vnx::TypeCode* const vnx_native_type_code_Block; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_BlockHeader; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ChainParams; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Challenge; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Context; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Contract; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_FarmInfo; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_FarmerBase; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Farmer_get_farm_info; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Farmer_get_farm_info_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Farmer_get_mac_addr; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Farmer_get_mac_addr_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Farmer_sign_block; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Farmer_sign_block_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_FarmerKeys; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_HarvesterBase; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Harvester_get_farm_info; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Harvester_get_farm_info_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Harvester_get_total_bytes; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Harvester_get_total_bytes_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Harvester_reload; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Harvester_reload_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_IntervalRequest; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_KeyFile; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_NetworkInfo; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_NodeBase; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_add_block; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_add_block_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_add_transaction; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_add_transaction_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_balance; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_balance_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_block; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_block_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_block_at; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_block_at_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_block_hash; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_block_hash_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_contract; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_contract_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_contracts; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_contracts_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_contracts_owned; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_contracts_owned_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_header; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_header_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_header_at; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_header_at_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_height; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_height_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_history_for; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_history_for_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_network_info; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_network_info_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_params; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_params_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_stxo_list; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_stxo_list_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_synced_height; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_synced_height_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_total_balance; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_total_balance_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_total_balances; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_total_balances_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_total_supply; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_total_supply_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_transaction; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_transaction_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_transactions; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_transactions_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_tx_height; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_tx_height_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_tx_ids_at; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_tx_ids_at_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_tx_info; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_tx_info_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_txo_info; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_txo_info_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_txo_infos; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_txo_infos_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_utxo_list; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_get_utxo_list_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_start_sync; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Node_start_sync_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Operation; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_PeerInfo; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProofOfSpace; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProofOfTime; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ProofResponse; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Request; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_RouterBase; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Router_discover; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Router_discover_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Router_fetch_block_at; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Router_fetch_block_at_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Router_get_blocks_at; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Router_get_blocks_at_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Router_get_connected_peers; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Router_get_connected_peers_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Router_get_farmer_credits; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Router_get_farmer_credits_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Router_get_id; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Router_get_id_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Router_get_info; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Router_get_info_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Router_get_known_peers; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Router_get_known_peers_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Router_get_peer_info; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Router_get_peer_info_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Router_get_peers; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Router_get_peers_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Router_sign_msg; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Router_sign_msg_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Solution; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_TimeInfusion; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_TimeLordBase; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_TimeLord_stop_vdf; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_TimeLord_stop_vdf_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Transaction; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_TransactionBase; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_WalletBase; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_add_account; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_add_account_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_deploy; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_deploy_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_gather_utxos_for; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_gather_utxos_for_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_get_accounts; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_get_accounts_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_get_address; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_get_address_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_get_all_addresses; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_get_all_addresses_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_get_all_farmer_keys; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_get_all_farmer_keys_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_get_balance; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_get_balance_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_get_balances; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_get_balances_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_get_contracts; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_get_contracts_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_get_farmer_keys; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_get_farmer_keys_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_get_history; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_get_history_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_get_master_seed; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_get_master_seed_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_get_reserved_balances; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_get_reserved_balances_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_get_stxo_list; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_get_stxo_list_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_get_stxo_list_for; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_get_stxo_list_for_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_get_utxo_list; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_get_utxo_list_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_get_utxo_list_for; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_get_utxo_list_for_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_mark_spent; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_mark_spent_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_mint; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_mint_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_release; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_release_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_release_all; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_release_all_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_reserve; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_reserve_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_send; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_send_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_send_from; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_send_from_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_sign_msg; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_sign_msg_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_sign_off; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_Wallet_sign_off_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_WebAPIBase; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_account_t; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_node_info_t; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_node_type_e; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_peer_info_t; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_permission_e; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_spend_options_t; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_stxo_entry_t; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_stxo_t; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_time_segment_t; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_tx_entry_t; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_tx_in_t; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_tx_info_t; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_tx_out_t; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_tx_type_e; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_txi_info_t; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_txio_key_t; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_txo_info_t; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_uint_fraction_t; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_ulong_fraction_t; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_utxo_entry_t; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_utxo_t; ///< \private

} // namespace mmx


namespace vnx {

void read(TypeInput& in, ::mmx::Block& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::BlockHeader& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::ChainParams& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Challenge& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Context& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Contract& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::FarmInfo& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::FarmerBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Farmer_get_farm_info& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Farmer_get_farm_info_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Farmer_get_mac_addr& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Farmer_get_mac_addr_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Farmer_sign_block& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Farmer_sign_block_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::FarmerKeys& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::HarvesterBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Harvester_get_farm_info& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Harvester_get_farm_info_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Harvester_get_total_bytes& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Harvester_get_total_bytes_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Harvester_reload& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Harvester_reload_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::IntervalRequest& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::KeyFile& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::NetworkInfo& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::NodeBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_add_block& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_add_block_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_add_transaction& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_add_transaction_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_balance& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_balance_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_block& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_block_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_block_at& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_block_at_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_block_hash& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_block_hash_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_contract& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_contract_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_contracts& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_contracts_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_contracts_owned& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_contracts_owned_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_header& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_header_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_header_at& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_header_at_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_height& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_height_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_history_for& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_history_for_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_network_info& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_network_info_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_params& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_params_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_stxo_list& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_stxo_list_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_synced_height& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_synced_height_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_total_balance& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_total_balance_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_total_balances& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_total_balances_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_total_supply& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_total_supply_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_transaction& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_transaction_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_transactions& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_transactions_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_tx_height& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_tx_height_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_tx_ids_at& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_tx_ids_at_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_tx_info& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_tx_info_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_txo_info& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_txo_info_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_txo_infos& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_txo_infos_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_utxo_list& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_get_utxo_list_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_start_sync& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Node_start_sync_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Operation& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::PeerInfo& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::ProofOfSpace& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::ProofOfTime& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::ProofResponse& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Request& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::RouterBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Router_discover& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Router_discover_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Router_fetch_block_at& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Router_fetch_block_at_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Router_get_blocks_at& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Router_get_blocks_at_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Router_get_connected_peers& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Router_get_connected_peers_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Router_get_farmer_credits& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Router_get_farmer_credits_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Router_get_id& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Router_get_id_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Router_get_info& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Router_get_info_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Router_get_known_peers& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Router_get_known_peers_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Router_get_peer_info& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Router_get_peer_info_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Router_get_peers& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Router_get_peers_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Router_sign_msg& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Router_sign_msg_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Solution& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::TimeInfusion& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::TimeLordBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::TimeLord_stop_vdf& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::TimeLord_stop_vdf_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Transaction& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::TransactionBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::WalletBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_add_account& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_add_account_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_deploy& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_deploy_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_gather_utxos_for& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_gather_utxos_for_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_get_accounts& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_get_accounts_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_get_address& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_get_address_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_get_all_addresses& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_get_all_addresses_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_get_all_farmer_keys& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_get_all_farmer_keys_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_get_balance& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_get_balance_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_get_balances& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_get_balances_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_get_contracts& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_get_contracts_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_get_farmer_keys& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_get_farmer_keys_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_get_history& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_get_history_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_get_master_seed& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_get_master_seed_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_get_reserved_balances& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_get_reserved_balances_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_get_stxo_list& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_get_stxo_list_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_get_stxo_list_for& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_get_stxo_list_for_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_get_utxo_list& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_get_utxo_list_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_get_utxo_list_for& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_get_utxo_list_for_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_mark_spent& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_mark_spent_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_mint& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_mint_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_release& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_release_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_release_all& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_release_all_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_reserve& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_reserve_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_send& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_send_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_send_from& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_send_from_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_sign_msg& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_sign_msg_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_sign_off& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::Wallet_sign_off_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::WebAPIBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::account_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::addr_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::bls_pubkey_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::bls_signature_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::hash_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::node_info_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::node_type_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::peer_info_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::permission_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::pubkey_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::signature_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::skey_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::spend_options_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::stxo_entry_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::stxo_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::time_segment_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::tx_entry_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::tx_in_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::tx_info_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::tx_out_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::tx_type_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::txi_info_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::txio_key_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::txo_info_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::uint_fraction_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::ulong_fraction_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::utxo_entry_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::mmx::utxo_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void write(TypeOutput& out, const ::mmx::Block& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::BlockHeader& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::ChainParams& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Challenge& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Context& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Contract& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::FarmInfo& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::FarmerBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Farmer_get_farm_info& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Farmer_get_farm_info_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Farmer_get_mac_addr& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Farmer_get_mac_addr_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Farmer_sign_block& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Farmer_sign_block_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::FarmerKeys& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::HarvesterBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Harvester_get_farm_info& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Harvester_get_farm_info_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Harvester_get_total_bytes& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Harvester_get_total_bytes_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Harvester_reload& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Harvester_reload_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::IntervalRequest& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::KeyFile& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::NetworkInfo& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::NodeBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_add_block& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_add_block_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_add_transaction& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_add_transaction_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_balance& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_balance_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_block& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_block_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_block_at& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_block_at_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_block_hash& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_block_hash_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_contract& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_contract_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_contracts& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_contracts_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_contracts_owned& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_contracts_owned_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_header& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_header_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_header_at& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_header_at_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_height& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_height_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_history_for& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_history_for_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_network_info& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_network_info_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_params& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_params_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_stxo_list& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_stxo_list_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_synced_height& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_synced_height_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_total_balance& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_total_balance_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_total_balances& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_total_balances_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_total_supply& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_total_supply_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_transaction& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_transaction_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_transactions& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_transactions_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_tx_height& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_tx_height_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_tx_ids_at& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_tx_ids_at_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_tx_info& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_tx_info_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_txo_info& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_txo_info_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_txo_infos& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_txo_infos_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_utxo_list& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_get_utxo_list_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_start_sync& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Node_start_sync_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Operation& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::PeerInfo& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::ProofOfSpace& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::ProofOfTime& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::ProofResponse& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Request& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::RouterBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Router_discover& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Router_discover_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Router_fetch_block_at& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Router_fetch_block_at_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Router_get_blocks_at& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Router_get_blocks_at_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Router_get_connected_peers& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Router_get_connected_peers_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Router_get_farmer_credits& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Router_get_farmer_credits_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Router_get_id& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Router_get_id_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Router_get_info& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Router_get_info_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Router_get_known_peers& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Router_get_known_peers_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Router_get_peer_info& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Router_get_peer_info_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Router_get_peers& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Router_get_peers_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Router_sign_msg& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Router_sign_msg_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Solution& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::TimeInfusion& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::TimeLordBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::TimeLord_stop_vdf& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::TimeLord_stop_vdf_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Transaction& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::TransactionBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::WalletBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_add_account& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_add_account_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_deploy& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_deploy_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_gather_utxos_for& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_gather_utxos_for_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_get_accounts& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_get_accounts_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_get_address& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_get_address_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_get_all_addresses& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_get_all_addresses_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_get_all_farmer_keys& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_get_all_farmer_keys_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_get_balance& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_get_balance_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_get_balances& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_get_balances_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_get_contracts& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_get_contracts_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_get_farmer_keys& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_get_farmer_keys_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_get_history& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_get_history_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_get_master_seed& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_get_master_seed_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_get_reserved_balances& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_get_reserved_balances_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_get_stxo_list& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_get_stxo_list_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_get_stxo_list_for& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_get_stxo_list_for_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_get_utxo_list& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_get_utxo_list_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_get_utxo_list_for& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_get_utxo_list_for_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_mark_spent& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_mark_spent_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_mint& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_mint_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_release& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_release_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_release_all& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_release_all_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_reserve& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_reserve_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_send& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_send_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_send_from& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_send_from_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_sign_msg& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_sign_msg_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_sign_off& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::Wallet_sign_off_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::WebAPIBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::account_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::addr_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::bls_pubkey_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::bls_signature_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::hash_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::node_info_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::node_type_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::peer_info_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::permission_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::pubkey_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::signature_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::skey_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::spend_options_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::stxo_entry_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::stxo_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::time_segment_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::tx_entry_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::tx_in_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::tx_info_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::tx_out_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::tx_type_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::txi_info_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::txio_key_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::txo_info_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::uint_fraction_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::ulong_fraction_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::utxo_entry_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::mmx::utxo_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void read(std::istream& in, ::mmx::Block& value); ///< \private
void read(std::istream& in, ::mmx::BlockHeader& value); ///< \private
void read(std::istream& in, ::mmx::ChainParams& value); ///< \private
void read(std::istream& in, ::mmx::Challenge& value); ///< \private
void read(std::istream& in, ::mmx::Context& value); ///< \private
void read(std::istream& in, ::mmx::Contract& value); ///< \private
void read(std::istream& in, ::mmx::FarmInfo& value); ///< \private
void read(std::istream& in, ::mmx::FarmerBase& value); ///< \private
void read(std::istream& in, ::mmx::Farmer_get_farm_info& value); ///< \private
void read(std::istream& in, ::mmx::Farmer_get_farm_info_return& value); ///< \private
void read(std::istream& in, ::mmx::Farmer_get_mac_addr& value); ///< \private
void read(std::istream& in, ::mmx::Farmer_get_mac_addr_return& value); ///< \private
void read(std::istream& in, ::mmx::Farmer_sign_block& value); ///< \private
void read(std::istream& in, ::mmx::Farmer_sign_block_return& value); ///< \private
void read(std::istream& in, ::mmx::FarmerKeys& value); ///< \private
void read(std::istream& in, ::mmx::HarvesterBase& value); ///< \private
void read(std::istream& in, ::mmx::Harvester_get_farm_info& value); ///< \private
void read(std::istream& in, ::mmx::Harvester_get_farm_info_return& value); ///< \private
void read(std::istream& in, ::mmx::Harvester_get_total_bytes& value); ///< \private
void read(std::istream& in, ::mmx::Harvester_get_total_bytes_return& value); ///< \private
void read(std::istream& in, ::mmx::Harvester_reload& value); ///< \private
void read(std::istream& in, ::mmx::Harvester_reload_return& value); ///< \private
void read(std::istream& in, ::mmx::IntervalRequest& value); ///< \private
void read(std::istream& in, ::mmx::KeyFile& value); ///< \private
void read(std::istream& in, ::mmx::NetworkInfo& value); ///< \private
void read(std::istream& in, ::mmx::NodeBase& value); ///< \private
void read(std::istream& in, ::mmx::Node_add_block& value); ///< \private
void read(std::istream& in, ::mmx::Node_add_block_return& value); ///< \private
void read(std::istream& in, ::mmx::Node_add_transaction& value); ///< \private
void read(std::istream& in, ::mmx::Node_add_transaction_return& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_balance& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_balance_return& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_block& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_block_return& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_block_at& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_block_at_return& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_block_hash& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_block_hash_return& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_contract& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_contract_return& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_contracts& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_contracts_return& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_contracts_owned& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_contracts_owned_return& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_header& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_header_return& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_header_at& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_header_at_return& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_height& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_height_return& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_history_for& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_history_for_return& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_network_info& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_network_info_return& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_params& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_params_return& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_stxo_list& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_stxo_list_return& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_synced_height& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_synced_height_return& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_total_balance& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_total_balance_return& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_total_balances& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_total_balances_return& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_total_supply& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_total_supply_return& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_transaction& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_transaction_return& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_transactions& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_transactions_return& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_tx_height& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_tx_height_return& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_tx_ids_at& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_tx_ids_at_return& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_tx_info& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_tx_info_return& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_txo_info& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_txo_info_return& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_txo_infos& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_txo_infos_return& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_utxo_list& value); ///< \private
void read(std::istream& in, ::mmx::Node_get_utxo_list_return& value); ///< \private
void read(std::istream& in, ::mmx::Node_start_sync& value); ///< \private
void read(std::istream& in, ::mmx::Node_start_sync_return& value); ///< \private
void read(std::istream& in, ::mmx::Operation& value); ///< \private
void read(std::istream& in, ::mmx::PeerInfo& value); ///< \private
void read(std::istream& in, ::mmx::ProofOfSpace& value); ///< \private
void read(std::istream& in, ::mmx::ProofOfTime& value); ///< \private
void read(std::istream& in, ::mmx::ProofResponse& value); ///< \private
void read(std::istream& in, ::mmx::Request& value); ///< \private
void read(std::istream& in, ::mmx::Return& value); ///< \private
void read(std::istream& in, ::mmx::RouterBase& value); ///< \private
void read(std::istream& in, ::mmx::Router_discover& value); ///< \private
void read(std::istream& in, ::mmx::Router_discover_return& value); ///< \private
void read(std::istream& in, ::mmx::Router_fetch_block_at& value); ///< \private
void read(std::istream& in, ::mmx::Router_fetch_block_at_return& value); ///< \private
void read(std::istream& in, ::mmx::Router_get_blocks_at& value); ///< \private
void read(std::istream& in, ::mmx::Router_get_blocks_at_return& value); ///< \private
void read(std::istream& in, ::mmx::Router_get_connected_peers& value); ///< \private
void read(std::istream& in, ::mmx::Router_get_connected_peers_return& value); ///< \private
void read(std::istream& in, ::mmx::Router_get_farmer_credits& value); ///< \private
void read(std::istream& in, ::mmx::Router_get_farmer_credits_return& value); ///< \private
void read(std::istream& in, ::mmx::Router_get_id& value); ///< \private
void read(std::istream& in, ::mmx::Router_get_id_return& value); ///< \private
void read(std::istream& in, ::mmx::Router_get_info& value); ///< \private
void read(std::istream& in, ::mmx::Router_get_info_return& value); ///< \private
void read(std::istream& in, ::mmx::Router_get_known_peers& value); ///< \private
void read(std::istream& in, ::mmx::Router_get_known_peers_return& value); ///< \private
void read(std::istream& in, ::mmx::Router_get_peer_info& value); ///< \private
void read(std::istream& in, ::mmx::Router_get_peer_info_return& value); ///< \private
void read(std::istream& in, ::mmx::Router_get_peers& value); ///< \private
void read(std::istream& in, ::mmx::Router_get_peers_return& value); ///< \private
void read(std::istream& in, ::mmx::Router_sign_msg& value); ///< \private
void read(std::istream& in, ::mmx::Router_sign_msg_return& value); ///< \private
void read(std::istream& in, ::mmx::Solution& value); ///< \private
void read(std::istream& in, ::mmx::TimeInfusion& value); ///< \private
void read(std::istream& in, ::mmx::TimeLordBase& value); ///< \private
void read(std::istream& in, ::mmx::TimeLord_stop_vdf& value); ///< \private
void read(std::istream& in, ::mmx::TimeLord_stop_vdf_return& value); ///< \private
void read(std::istream& in, ::mmx::Transaction& value); ///< \private
void read(std::istream& in, ::mmx::TransactionBase& value); ///< \private
void read(std::istream& in, ::mmx::WalletBase& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_add_account& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_add_account_return& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_deploy& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_deploy_return& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_gather_utxos_for& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_gather_utxos_for_return& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_get_accounts& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_get_accounts_return& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_get_address& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_get_address_return& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_get_all_addresses& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_get_all_addresses_return& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_get_all_farmer_keys& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_get_all_farmer_keys_return& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_get_balance& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_get_balance_return& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_get_balances& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_get_balances_return& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_get_contracts& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_get_contracts_return& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_get_farmer_keys& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_get_farmer_keys_return& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_get_history& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_get_history_return& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_get_master_seed& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_get_master_seed_return& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_get_reserved_balances& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_get_reserved_balances_return& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_get_stxo_list& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_get_stxo_list_return& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_get_stxo_list_for& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_get_stxo_list_for_return& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_get_utxo_list& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_get_utxo_list_return& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_get_utxo_list_for& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_get_utxo_list_for_return& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_mark_spent& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_mark_spent_return& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_mint& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_mint_return& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_release& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_release_return& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_release_all& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_release_all_return& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_reserve& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_reserve_return& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_send& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_send_return& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_send_from& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_send_from_return& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_sign_msg& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_sign_msg_return& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_sign_off& value); ///< \private
void read(std::istream& in, ::mmx::Wallet_sign_off_return& value); ///< \private
void read(std::istream& in, ::mmx::WebAPIBase& value); ///< \private
void read(std::istream& in, ::mmx::account_t& value); ///< \private
void read(std::istream& in, ::mmx::addr_t& value); ///< \private
void read(std::istream& in, ::mmx::bls_pubkey_t& value); ///< \private
void read(std::istream& in, ::mmx::bls_signature_t& value); ///< \private
void read(std::istream& in, ::mmx::hash_t& value); ///< \private
void read(std::istream& in, ::mmx::node_info_t& value); ///< \private
void read(std::istream& in, ::mmx::node_type_e& value); ///< \private
void read(std::istream& in, ::mmx::peer_info_t& value); ///< \private
void read(std::istream& in, ::mmx::permission_e& value); ///< \private
void read(std::istream& in, ::mmx::pubkey_t& value); ///< \private
void read(std::istream& in, ::mmx::signature_t& value); ///< \private
void read(std::istream& in, ::mmx::skey_t& value); ///< \private
void read(std::istream& in, ::mmx::spend_options_t& value); ///< \private
void read(std::istream& in, ::mmx::stxo_entry_t& value); ///< \private
void read(std::istream& in, ::mmx::stxo_t& value); ///< \private
void read(std::istream& in, ::mmx::time_segment_t& value); ///< \private
void read(std::istream& in, ::mmx::tx_entry_t& value); ///< \private
void read(std::istream& in, ::mmx::tx_in_t& value); ///< \private
void read(std::istream& in, ::mmx::tx_info_t& value); ///< \private
void read(std::istream& in, ::mmx::tx_out_t& value); ///< \private
void read(std::istream& in, ::mmx::tx_type_e& value); ///< \private
void read(std::istream& in, ::mmx::txi_info_t& value); ///< \private
void read(std::istream& in, ::mmx::txio_key_t& value); ///< \private
void read(std::istream& in, ::mmx::txo_info_t& value); ///< \private
void read(std::istream& in, ::mmx::uint_fraction_t& value); ///< \private
void read(std::istream& in, ::mmx::ulong_fraction_t& value); ///< \private
void read(std::istream& in, ::mmx::utxo_entry_t& value); ///< \private
void read(std::istream& in, ::mmx::utxo_t& value); ///< \private

void write(std::ostream& out, const ::mmx::Block& value); ///< \private
void write(std::ostream& out, const ::mmx::BlockHeader& value); ///< \private
void write(std::ostream& out, const ::mmx::ChainParams& value); ///< \private
void write(std::ostream& out, const ::mmx::Challenge& value); ///< \private
void write(std::ostream& out, const ::mmx::Context& value); ///< \private
void write(std::ostream& out, const ::mmx::Contract& value); ///< \private
void write(std::ostream& out, const ::mmx::FarmInfo& value); ///< \private
void write(std::ostream& out, const ::mmx::FarmerBase& value); ///< \private
void write(std::ostream& out, const ::mmx::Farmer_get_farm_info& value); ///< \private
void write(std::ostream& out, const ::mmx::Farmer_get_farm_info_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Farmer_get_mac_addr& value); ///< \private
void write(std::ostream& out, const ::mmx::Farmer_get_mac_addr_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Farmer_sign_block& value); ///< \private
void write(std::ostream& out, const ::mmx::Farmer_sign_block_return& value); ///< \private
void write(std::ostream& out, const ::mmx::FarmerKeys& value); ///< \private
void write(std::ostream& out, const ::mmx::HarvesterBase& value); ///< \private
void write(std::ostream& out, const ::mmx::Harvester_get_farm_info& value); ///< \private
void write(std::ostream& out, const ::mmx::Harvester_get_farm_info_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Harvester_get_total_bytes& value); ///< \private
void write(std::ostream& out, const ::mmx::Harvester_get_total_bytes_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Harvester_reload& value); ///< \private
void write(std::ostream& out, const ::mmx::Harvester_reload_return& value); ///< \private
void write(std::ostream& out, const ::mmx::IntervalRequest& value); ///< \private
void write(std::ostream& out, const ::mmx::KeyFile& value); ///< \private
void write(std::ostream& out, const ::mmx::NetworkInfo& value); ///< \private
void write(std::ostream& out, const ::mmx::NodeBase& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_add_block& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_add_block_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_add_transaction& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_add_transaction_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_balance& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_balance_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_block& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_block_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_block_at& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_block_at_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_block_hash& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_block_hash_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_contract& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_contract_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_contracts& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_contracts_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_contracts_owned& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_contracts_owned_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_header& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_header_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_header_at& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_header_at_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_height& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_height_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_history_for& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_history_for_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_network_info& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_network_info_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_params& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_params_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_stxo_list& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_stxo_list_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_synced_height& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_synced_height_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_total_balance& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_total_balance_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_total_balances& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_total_balances_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_total_supply& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_total_supply_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_transaction& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_transaction_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_transactions& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_transactions_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_tx_height& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_tx_height_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_tx_ids_at& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_tx_ids_at_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_tx_info& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_tx_info_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_txo_info& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_txo_info_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_txo_infos& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_txo_infos_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_utxo_list& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_get_utxo_list_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_start_sync& value); ///< \private
void write(std::ostream& out, const ::mmx::Node_start_sync_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Operation& value); ///< \private
void write(std::ostream& out, const ::mmx::PeerInfo& value); ///< \private
void write(std::ostream& out, const ::mmx::ProofOfSpace& value); ///< \private
void write(std::ostream& out, const ::mmx::ProofOfTime& value); ///< \private
void write(std::ostream& out, const ::mmx::ProofResponse& value); ///< \private
void write(std::ostream& out, const ::mmx::Request& value); ///< \private
void write(std::ostream& out, const ::mmx::Return& value); ///< \private
void write(std::ostream& out, const ::mmx::RouterBase& value); ///< \private
void write(std::ostream& out, const ::mmx::Router_discover& value); ///< \private
void write(std::ostream& out, const ::mmx::Router_discover_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Router_fetch_block_at& value); ///< \private
void write(std::ostream& out, const ::mmx::Router_fetch_block_at_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Router_get_blocks_at& value); ///< \private
void write(std::ostream& out, const ::mmx::Router_get_blocks_at_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Router_get_connected_peers& value); ///< \private
void write(std::ostream& out, const ::mmx::Router_get_connected_peers_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Router_get_farmer_credits& value); ///< \private
void write(std::ostream& out, const ::mmx::Router_get_farmer_credits_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Router_get_id& value); ///< \private
void write(std::ostream& out, const ::mmx::Router_get_id_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Router_get_info& value); ///< \private
void write(std::ostream& out, const ::mmx::Router_get_info_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Router_get_known_peers& value); ///< \private
void write(std::ostream& out, const ::mmx::Router_get_known_peers_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Router_get_peer_info& value); ///< \private
void write(std::ostream& out, const ::mmx::Router_get_peer_info_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Router_get_peers& value); ///< \private
void write(std::ostream& out, const ::mmx::Router_get_peers_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Router_sign_msg& value); ///< \private
void write(std::ostream& out, const ::mmx::Router_sign_msg_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Solution& value); ///< \private
void write(std::ostream& out, const ::mmx::TimeInfusion& value); ///< \private
void write(std::ostream& out, const ::mmx::TimeLordBase& value); ///< \private
void write(std::ostream& out, const ::mmx::TimeLord_stop_vdf& value); ///< \private
void write(std::ostream& out, const ::mmx::TimeLord_stop_vdf_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Transaction& value); ///< \private
void write(std::ostream& out, const ::mmx::TransactionBase& value); ///< \private
void write(std::ostream& out, const ::mmx::WalletBase& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_add_account& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_add_account_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_deploy& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_deploy_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_gather_utxos_for& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_gather_utxos_for_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_get_accounts& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_get_accounts_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_get_address& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_get_address_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_get_all_addresses& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_get_all_addresses_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_get_all_farmer_keys& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_get_all_farmer_keys_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_get_balance& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_get_balance_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_get_balances& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_get_balances_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_get_contracts& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_get_contracts_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_get_farmer_keys& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_get_farmer_keys_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_get_history& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_get_history_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_get_master_seed& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_get_master_seed_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_get_reserved_balances& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_get_reserved_balances_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_get_stxo_list& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_get_stxo_list_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_get_stxo_list_for& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_get_stxo_list_for_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_get_utxo_list& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_get_utxo_list_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_get_utxo_list_for& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_get_utxo_list_for_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_mark_spent& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_mark_spent_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_mint& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_mint_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_release& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_release_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_release_all& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_release_all_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_reserve& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_reserve_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_send& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_send_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_send_from& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_send_from_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_sign_msg& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_sign_msg_return& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_sign_off& value); ///< \private
void write(std::ostream& out, const ::mmx::Wallet_sign_off_return& value); ///< \private
void write(std::ostream& out, const ::mmx::WebAPIBase& value); ///< \private
void write(std::ostream& out, const ::mmx::account_t& value); ///< \private
void write(std::ostream& out, const ::mmx::addr_t& value); ///< \private
void write(std::ostream& out, const ::mmx::bls_pubkey_t& value); ///< \private
void write(std::ostream& out, const ::mmx::bls_signature_t& value); ///< \private
void write(std::ostream& out, const ::mmx::hash_t& value); ///< \private
void write(std::ostream& out, const ::mmx::node_info_t& value); ///< \private
void write(std::ostream& out, const ::mmx::node_type_e& value); ///< \private
void write(std::ostream& out, const ::mmx::peer_info_t& value); ///< \private
void write(std::ostream& out, const ::mmx::permission_e& value); ///< \private
void write(std::ostream& out, const ::mmx::pubkey_t& value); ///< \private
void write(std::ostream& out, const ::mmx::signature_t& value); ///< \private
void write(std::ostream& out, const ::mmx::skey_t& value); ///< \private
void write(std::ostream& out, const ::mmx::spend_options_t& value); ///< \private
void write(std::ostream& out, const ::mmx::stxo_entry_t& value); ///< \private
void write(std::ostream& out, const ::mmx::stxo_t& value); ///< \private
void write(std::ostream& out, const ::mmx::time_segment_t& value); ///< \private
void write(std::ostream& out, const ::mmx::tx_entry_t& value); ///< \private
void write(std::ostream& out, const ::mmx::tx_in_t& value); ///< \private
void write(std::ostream& out, const ::mmx::tx_info_t& value); ///< \private
void write(std::ostream& out, const ::mmx::tx_out_t& value); ///< \private
void write(std::ostream& out, const ::mmx::tx_type_e& value); ///< \private
void write(std::ostream& out, const ::mmx::txi_info_t& value); ///< \private
void write(std::ostream& out, const ::mmx::txio_key_t& value); ///< \private
void write(std::ostream& out, const ::mmx::txo_info_t& value); ///< \private
void write(std::ostream& out, const ::mmx::uint_fraction_t& value); ///< \private
void write(std::ostream& out, const ::mmx::ulong_fraction_t& value); ///< \private
void write(std::ostream& out, const ::mmx::utxo_entry_t& value); ///< \private
void write(std::ostream& out, const ::mmx::utxo_t& value); ///< \private

void accept(Visitor& visitor, const ::mmx::Block& value); ///< \private
void accept(Visitor& visitor, const ::mmx::BlockHeader& value); ///< \private
void accept(Visitor& visitor, const ::mmx::ChainParams& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Challenge& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Context& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Contract& value); ///< \private
void accept(Visitor& visitor, const ::mmx::FarmInfo& value); ///< \private
void accept(Visitor& visitor, const ::mmx::FarmerBase& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Farmer_get_farm_info& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Farmer_get_farm_info_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Farmer_get_mac_addr& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Farmer_get_mac_addr_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Farmer_sign_block& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Farmer_sign_block_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::FarmerKeys& value); ///< \private
void accept(Visitor& visitor, const ::mmx::HarvesterBase& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Harvester_get_farm_info& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Harvester_get_farm_info_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Harvester_get_total_bytes& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Harvester_get_total_bytes_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Harvester_reload& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Harvester_reload_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::IntervalRequest& value); ///< \private
void accept(Visitor& visitor, const ::mmx::KeyFile& value); ///< \private
void accept(Visitor& visitor, const ::mmx::NetworkInfo& value); ///< \private
void accept(Visitor& visitor, const ::mmx::NodeBase& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_add_block& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_add_block_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_add_transaction& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_add_transaction_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_balance& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_balance_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_block& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_block_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_block_at& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_block_at_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_block_hash& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_block_hash_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_contract& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_contract_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_contracts& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_contracts_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_contracts_owned& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_contracts_owned_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_header& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_header_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_header_at& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_header_at_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_height& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_height_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_history_for& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_history_for_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_network_info& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_network_info_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_params& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_params_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_stxo_list& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_stxo_list_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_synced_height& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_synced_height_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_total_balance& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_total_balance_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_total_balances& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_total_balances_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_total_supply& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_total_supply_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_transaction& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_transaction_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_transactions& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_transactions_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_tx_height& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_tx_height_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_tx_ids_at& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_tx_ids_at_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_tx_info& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_tx_info_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_txo_info& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_txo_info_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_txo_infos& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_txo_infos_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_utxo_list& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_get_utxo_list_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_start_sync& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Node_start_sync_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Operation& value); ///< \private
void accept(Visitor& visitor, const ::mmx::PeerInfo& value); ///< \private
void accept(Visitor& visitor, const ::mmx::ProofOfSpace& value); ///< \private
void accept(Visitor& visitor, const ::mmx::ProofOfTime& value); ///< \private
void accept(Visitor& visitor, const ::mmx::ProofResponse& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Request& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::RouterBase& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Router_discover& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Router_discover_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Router_fetch_block_at& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Router_fetch_block_at_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Router_get_blocks_at& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Router_get_blocks_at_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Router_get_connected_peers& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Router_get_connected_peers_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Router_get_farmer_credits& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Router_get_farmer_credits_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Router_get_id& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Router_get_id_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Router_get_info& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Router_get_info_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Router_get_known_peers& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Router_get_known_peers_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Router_get_peer_info& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Router_get_peer_info_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Router_get_peers& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Router_get_peers_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Router_sign_msg& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Router_sign_msg_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Solution& value); ///< \private
void accept(Visitor& visitor, const ::mmx::TimeInfusion& value); ///< \private
void accept(Visitor& visitor, const ::mmx::TimeLordBase& value); ///< \private
void accept(Visitor& visitor, const ::mmx::TimeLord_stop_vdf& value); ///< \private
void accept(Visitor& visitor, const ::mmx::TimeLord_stop_vdf_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Transaction& value); ///< \private
void accept(Visitor& visitor, const ::mmx::TransactionBase& value); ///< \private
void accept(Visitor& visitor, const ::mmx::WalletBase& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_add_account& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_add_account_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_deploy& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_deploy_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_gather_utxos_for& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_gather_utxos_for_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_get_accounts& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_get_accounts_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_get_address& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_get_address_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_get_all_addresses& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_get_all_addresses_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_get_all_farmer_keys& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_get_all_farmer_keys_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_get_balance& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_get_balance_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_get_balances& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_get_balances_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_get_contracts& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_get_contracts_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_get_farmer_keys& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_get_farmer_keys_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_get_history& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_get_history_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_get_master_seed& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_get_master_seed_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_get_reserved_balances& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_get_reserved_balances_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_get_stxo_list& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_get_stxo_list_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_get_stxo_list_for& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_get_stxo_list_for_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_get_utxo_list& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_get_utxo_list_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_get_utxo_list_for& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_get_utxo_list_for_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_mark_spent& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_mark_spent_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_mint& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_mint_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_release& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_release_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_release_all& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_release_all_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_reserve& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_reserve_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_send& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_send_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_send_from& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_send_from_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_sign_msg& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_sign_msg_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_sign_off& value); ///< \private
void accept(Visitor& visitor, const ::mmx::Wallet_sign_off_return& value); ///< \private
void accept(Visitor& visitor, const ::mmx::WebAPIBase& value); ///< \private
void accept(Visitor& visitor, const ::mmx::account_t& value); ///< \private
void accept(Visitor& visitor, const ::mmx::addr_t& value); ///< \private
void accept(Visitor& visitor, const ::mmx::bls_pubkey_t& value); ///< \private
void accept(Visitor& visitor, const ::mmx::bls_signature_t& value); ///< \private
void accept(Visitor& visitor, const ::mmx::hash_t& value); ///< \private
void accept(Visitor& visitor, const ::mmx::node_info_t& value); ///< \private
void accept(Visitor& visitor, const ::mmx::node_type_e& value); ///< \private
void accept(Visitor& visitor, const ::mmx::peer_info_t& value); ///< \private
void accept(Visitor& visitor, const ::mmx::permission_e& value); ///< \private
void accept(Visitor& visitor, const ::mmx::pubkey_t& value); ///< \private
void accept(Visitor& visitor, const ::mmx::signature_t& value); ///< \private
void accept(Visitor& visitor, const ::mmx::skey_t& value); ///< \private
void accept(Visitor& visitor, const ::mmx::spend_options_t& value); ///< \private
void accept(Visitor& visitor, const ::mmx::stxo_entry_t& value); ///< \private
void accept(Visitor& visitor, const ::mmx::stxo_t& value); ///< \private
void accept(Visitor& visitor, const ::mmx::time_segment_t& value); ///< \private
void accept(Visitor& visitor, const ::mmx::tx_entry_t& value); ///< \private
void accept(Visitor& visitor, const ::mmx::tx_in_t& value); ///< \private
void accept(Visitor& visitor, const ::mmx::tx_info_t& value); ///< \private
void accept(Visitor& visitor, const ::mmx::tx_out_t& value); ///< \private
void accept(Visitor& visitor, const ::mmx::tx_type_e& value); ///< \private
void accept(Visitor& visitor, const ::mmx::txi_info_t& value); ///< \private
void accept(Visitor& visitor, const ::mmx::txio_key_t& value); ///< \private
void accept(Visitor& visitor, const ::mmx::txo_info_t& value); ///< \private
void accept(Visitor& visitor, const ::mmx::uint_fraction_t& value); ///< \private
void accept(Visitor& visitor, const ::mmx::ulong_fraction_t& value); ///< \private
void accept(Visitor& visitor, const ::mmx::utxo_entry_t& value); ///< \private
void accept(Visitor& visitor, const ::mmx::utxo_t& value); ///< \private

/// \private
template<>
struct type<::mmx::Block> {
	void read(TypeInput& in, ::mmx::Block& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Block& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Block& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Block& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Block& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Block& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::BlockHeader> {
	void read(TypeInput& in, ::mmx::BlockHeader& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::BlockHeader& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::BlockHeader& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::BlockHeader& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::BlockHeader& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::BlockHeader& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::ChainParams> {
	void read(TypeInput& in, ::mmx::ChainParams& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::ChainParams& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::ChainParams& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::ChainParams& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::ChainParams& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::ChainParams& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Challenge> {
	void read(TypeInput& in, ::mmx::Challenge& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Challenge& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Challenge& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Challenge& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Challenge& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Challenge& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Context> {
	void read(TypeInput& in, ::mmx::Context& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Context& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Context& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Context& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Context& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Context& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Contract> {
	void read(TypeInput& in, ::mmx::Contract& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Contract& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Contract& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Contract& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Contract& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Contract& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::FarmInfo> {
	void read(TypeInput& in, ::mmx::FarmInfo& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::FarmInfo& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::FarmInfo& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::FarmInfo& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::FarmInfo& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::FarmInfo& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::FarmerBase> {
	void read(TypeInput& in, ::mmx::FarmerBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::FarmerBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::FarmerBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::FarmerBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::FarmerBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::mmx::Farmer_get_farm_info> {
	void read(TypeInput& in, ::mmx::Farmer_get_farm_info& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Farmer_get_farm_info& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Farmer_get_farm_info& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Farmer_get_farm_info& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Farmer_get_farm_info& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Farmer_get_farm_info& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Farmer_get_farm_info_return> {
	void read(TypeInput& in, ::mmx::Farmer_get_farm_info_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Farmer_get_farm_info_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Farmer_get_farm_info_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Farmer_get_farm_info_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Farmer_get_farm_info_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Farmer_get_farm_info_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Farmer_get_mac_addr> {
	void read(TypeInput& in, ::mmx::Farmer_get_mac_addr& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Farmer_get_mac_addr& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Farmer_get_mac_addr& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Farmer_get_mac_addr& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Farmer_get_mac_addr& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Farmer_get_mac_addr& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Farmer_get_mac_addr_return> {
	void read(TypeInput& in, ::mmx::Farmer_get_mac_addr_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Farmer_get_mac_addr_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Farmer_get_mac_addr_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Farmer_get_mac_addr_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Farmer_get_mac_addr_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Farmer_get_mac_addr_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Farmer_sign_block> {
	void read(TypeInput& in, ::mmx::Farmer_sign_block& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Farmer_sign_block& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Farmer_sign_block& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Farmer_sign_block& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Farmer_sign_block& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Farmer_sign_block& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Farmer_sign_block_return> {
	void read(TypeInput& in, ::mmx::Farmer_sign_block_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Farmer_sign_block_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Farmer_sign_block_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Farmer_sign_block_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Farmer_sign_block_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Farmer_sign_block_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::FarmerKeys> {
	void read(TypeInput& in, ::mmx::FarmerKeys& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::FarmerKeys& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::FarmerKeys& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::FarmerKeys& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::FarmerKeys& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::FarmerKeys& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::HarvesterBase> {
	void read(TypeInput& in, ::mmx::HarvesterBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::HarvesterBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::HarvesterBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::HarvesterBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::HarvesterBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::mmx::Harvester_get_farm_info> {
	void read(TypeInput& in, ::mmx::Harvester_get_farm_info& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Harvester_get_farm_info& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Harvester_get_farm_info& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Harvester_get_farm_info& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Harvester_get_farm_info& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Harvester_get_farm_info& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Harvester_get_farm_info_return> {
	void read(TypeInput& in, ::mmx::Harvester_get_farm_info_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Harvester_get_farm_info_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Harvester_get_farm_info_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Harvester_get_farm_info_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Harvester_get_farm_info_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Harvester_get_farm_info_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Harvester_get_total_bytes> {
	void read(TypeInput& in, ::mmx::Harvester_get_total_bytes& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Harvester_get_total_bytes& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Harvester_get_total_bytes& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Harvester_get_total_bytes& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Harvester_get_total_bytes& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Harvester_get_total_bytes& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Harvester_get_total_bytes_return> {
	void read(TypeInput& in, ::mmx::Harvester_get_total_bytes_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Harvester_get_total_bytes_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Harvester_get_total_bytes_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Harvester_get_total_bytes_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Harvester_get_total_bytes_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Harvester_get_total_bytes_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Harvester_reload> {
	void read(TypeInput& in, ::mmx::Harvester_reload& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Harvester_reload& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Harvester_reload& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Harvester_reload& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Harvester_reload& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Harvester_reload& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Harvester_reload_return> {
	void read(TypeInput& in, ::mmx::Harvester_reload_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Harvester_reload_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Harvester_reload_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Harvester_reload_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Harvester_reload_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Harvester_reload_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::IntervalRequest> {
	void read(TypeInput& in, ::mmx::IntervalRequest& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::IntervalRequest& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::IntervalRequest& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::IntervalRequest& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::IntervalRequest& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::IntervalRequest& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::KeyFile> {
	void read(TypeInput& in, ::mmx::KeyFile& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::KeyFile& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::KeyFile& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::KeyFile& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::KeyFile& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::KeyFile& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::NetworkInfo> {
	void read(TypeInput& in, ::mmx::NetworkInfo& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::NetworkInfo& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::NetworkInfo& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::NetworkInfo& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::NetworkInfo& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::NetworkInfo& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::NodeBase> {
	void read(TypeInput& in, ::mmx::NodeBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::NodeBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::NodeBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::NodeBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::NodeBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::mmx::Node_add_block> {
	void read(TypeInput& in, ::mmx::Node_add_block& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_add_block& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_add_block& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_add_block& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_add_block& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_add_block& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_add_block_return> {
	void read(TypeInput& in, ::mmx::Node_add_block_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_add_block_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_add_block_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_add_block_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_add_block_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_add_block_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_add_transaction> {
	void read(TypeInput& in, ::mmx::Node_add_transaction& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_add_transaction& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_add_transaction& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_add_transaction& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_add_transaction& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_add_transaction& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_add_transaction_return> {
	void read(TypeInput& in, ::mmx::Node_add_transaction_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_add_transaction_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_add_transaction_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_add_transaction_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_add_transaction_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_add_transaction_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_balance> {
	void read(TypeInput& in, ::mmx::Node_get_balance& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_balance& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_balance& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_balance& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_balance& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_balance& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_balance_return> {
	void read(TypeInput& in, ::mmx::Node_get_balance_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_balance_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_balance_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_balance_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_balance_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_balance_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_block> {
	void read(TypeInput& in, ::mmx::Node_get_block& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_block& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_block& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_block& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_block& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_block& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_block_return> {
	void read(TypeInput& in, ::mmx::Node_get_block_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_block_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_block_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_block_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_block_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_block_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_block_at> {
	void read(TypeInput& in, ::mmx::Node_get_block_at& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_block_at& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_block_at& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_block_at& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_block_at& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_block_at& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_block_at_return> {
	void read(TypeInput& in, ::mmx::Node_get_block_at_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_block_at_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_block_at_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_block_at_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_block_at_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_block_at_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_block_hash> {
	void read(TypeInput& in, ::mmx::Node_get_block_hash& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_block_hash& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_block_hash& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_block_hash& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_block_hash& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_block_hash& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_block_hash_return> {
	void read(TypeInput& in, ::mmx::Node_get_block_hash_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_block_hash_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_block_hash_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_block_hash_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_block_hash_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_block_hash_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_contract> {
	void read(TypeInput& in, ::mmx::Node_get_contract& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_contract& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_contract& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_contract& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_contract& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_contract& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_contract_return> {
	void read(TypeInput& in, ::mmx::Node_get_contract_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_contract_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_contract_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_contract_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_contract_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_contract_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_contracts> {
	void read(TypeInput& in, ::mmx::Node_get_contracts& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_contracts& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_contracts& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_contracts& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_contracts& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_contracts& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_contracts_return> {
	void read(TypeInput& in, ::mmx::Node_get_contracts_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_contracts_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_contracts_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_contracts_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_contracts_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_contracts_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_contracts_owned> {
	void read(TypeInput& in, ::mmx::Node_get_contracts_owned& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_contracts_owned& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_contracts_owned& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_contracts_owned& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_contracts_owned& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_contracts_owned& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_contracts_owned_return> {
	void read(TypeInput& in, ::mmx::Node_get_contracts_owned_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_contracts_owned_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_contracts_owned_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_contracts_owned_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_contracts_owned_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_contracts_owned_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_header> {
	void read(TypeInput& in, ::mmx::Node_get_header& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_header& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_header& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_header& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_header& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_header& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_header_return> {
	void read(TypeInput& in, ::mmx::Node_get_header_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_header_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_header_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_header_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_header_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_header_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_header_at> {
	void read(TypeInput& in, ::mmx::Node_get_header_at& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_header_at& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_header_at& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_header_at& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_header_at& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_header_at& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_header_at_return> {
	void read(TypeInput& in, ::mmx::Node_get_header_at_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_header_at_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_header_at_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_header_at_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_header_at_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_header_at_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_height> {
	void read(TypeInput& in, ::mmx::Node_get_height& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_height& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_height& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_height& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_height& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_height& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_height_return> {
	void read(TypeInput& in, ::mmx::Node_get_height_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_height_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_height_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_height_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_height_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_height_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_history_for> {
	void read(TypeInput& in, ::mmx::Node_get_history_for& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_history_for& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_history_for& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_history_for& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_history_for& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_history_for& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_history_for_return> {
	void read(TypeInput& in, ::mmx::Node_get_history_for_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_history_for_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_history_for_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_history_for_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_history_for_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_history_for_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_network_info> {
	void read(TypeInput& in, ::mmx::Node_get_network_info& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_network_info& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_network_info& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_network_info& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_network_info& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_network_info& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_network_info_return> {
	void read(TypeInput& in, ::mmx::Node_get_network_info_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_network_info_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_network_info_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_network_info_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_network_info_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_network_info_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_params> {
	void read(TypeInput& in, ::mmx::Node_get_params& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_params& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_params& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_params& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_params& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_params& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_params_return> {
	void read(TypeInput& in, ::mmx::Node_get_params_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_params_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_params_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_params_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_params_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_params_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_stxo_list> {
	void read(TypeInput& in, ::mmx::Node_get_stxo_list& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_stxo_list& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_stxo_list& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_stxo_list& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_stxo_list& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_stxo_list& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_stxo_list_return> {
	void read(TypeInput& in, ::mmx::Node_get_stxo_list_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_stxo_list_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_stxo_list_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_stxo_list_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_stxo_list_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_stxo_list_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_synced_height> {
	void read(TypeInput& in, ::mmx::Node_get_synced_height& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_synced_height& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_synced_height& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_synced_height& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_synced_height& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_synced_height& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_synced_height_return> {
	void read(TypeInput& in, ::mmx::Node_get_synced_height_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_synced_height_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_synced_height_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_synced_height_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_synced_height_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_synced_height_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_total_balance> {
	void read(TypeInput& in, ::mmx::Node_get_total_balance& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_total_balance& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_total_balance& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_total_balance& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_total_balance& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_total_balance& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_total_balance_return> {
	void read(TypeInput& in, ::mmx::Node_get_total_balance_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_total_balance_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_total_balance_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_total_balance_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_total_balance_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_total_balance_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_total_balances> {
	void read(TypeInput& in, ::mmx::Node_get_total_balances& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_total_balances& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_total_balances& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_total_balances& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_total_balances& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_total_balances& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_total_balances_return> {
	void read(TypeInput& in, ::mmx::Node_get_total_balances_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_total_balances_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_total_balances_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_total_balances_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_total_balances_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_total_balances_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_total_supply> {
	void read(TypeInput& in, ::mmx::Node_get_total_supply& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_total_supply& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_total_supply& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_total_supply& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_total_supply& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_total_supply& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_total_supply_return> {
	void read(TypeInput& in, ::mmx::Node_get_total_supply_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_total_supply_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_total_supply_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_total_supply_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_total_supply_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_total_supply_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_transaction> {
	void read(TypeInput& in, ::mmx::Node_get_transaction& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_transaction& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_transaction& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_transaction& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_transaction& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_transaction& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_transaction_return> {
	void read(TypeInput& in, ::mmx::Node_get_transaction_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_transaction_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_transaction_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_transaction_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_transaction_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_transaction_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_transactions> {
	void read(TypeInput& in, ::mmx::Node_get_transactions& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_transactions& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_transactions& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_transactions& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_transactions& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_transactions& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_transactions_return> {
	void read(TypeInput& in, ::mmx::Node_get_transactions_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_transactions_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_transactions_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_transactions_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_transactions_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_transactions_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_tx_height> {
	void read(TypeInput& in, ::mmx::Node_get_tx_height& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_tx_height& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_tx_height& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_tx_height& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_tx_height& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_tx_height& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_tx_height_return> {
	void read(TypeInput& in, ::mmx::Node_get_tx_height_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_tx_height_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_tx_height_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_tx_height_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_tx_height_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_tx_height_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_tx_ids_at> {
	void read(TypeInput& in, ::mmx::Node_get_tx_ids_at& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_tx_ids_at& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_tx_ids_at& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_tx_ids_at& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_tx_ids_at& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_tx_ids_at& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_tx_ids_at_return> {
	void read(TypeInput& in, ::mmx::Node_get_tx_ids_at_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_tx_ids_at_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_tx_ids_at_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_tx_ids_at_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_tx_ids_at_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_tx_ids_at_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_tx_info> {
	void read(TypeInput& in, ::mmx::Node_get_tx_info& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_tx_info& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_tx_info& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_tx_info& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_tx_info& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_tx_info& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_tx_info_return> {
	void read(TypeInput& in, ::mmx::Node_get_tx_info_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_tx_info_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_tx_info_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_tx_info_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_tx_info_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_tx_info_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_txo_info> {
	void read(TypeInput& in, ::mmx::Node_get_txo_info& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_txo_info& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_txo_info& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_txo_info& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_txo_info& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_txo_info& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_txo_info_return> {
	void read(TypeInput& in, ::mmx::Node_get_txo_info_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_txo_info_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_txo_info_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_txo_info_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_txo_info_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_txo_info_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_txo_infos> {
	void read(TypeInput& in, ::mmx::Node_get_txo_infos& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_txo_infos& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_txo_infos& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_txo_infos& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_txo_infos& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_txo_infos& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_txo_infos_return> {
	void read(TypeInput& in, ::mmx::Node_get_txo_infos_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_txo_infos_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_txo_infos_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_txo_infos_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_txo_infos_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_txo_infos_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_utxo_list> {
	void read(TypeInput& in, ::mmx::Node_get_utxo_list& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_utxo_list& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_utxo_list& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_utxo_list& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_utxo_list& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_utxo_list& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_get_utxo_list_return> {
	void read(TypeInput& in, ::mmx::Node_get_utxo_list_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_get_utxo_list_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_get_utxo_list_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_get_utxo_list_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_get_utxo_list_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_utxo_list_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_start_sync> {
	void read(TypeInput& in, ::mmx::Node_start_sync& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_start_sync& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_start_sync& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_start_sync& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_start_sync& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_start_sync& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Node_start_sync_return> {
	void read(TypeInput& in, ::mmx::Node_start_sync_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Node_start_sync_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Node_start_sync_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Node_start_sync_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Node_start_sync_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_start_sync_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Operation> {
	void read(TypeInput& in, ::mmx::Operation& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Operation& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Operation& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Operation& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Operation& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Operation& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::PeerInfo> {
	void read(TypeInput& in, ::mmx::PeerInfo& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::PeerInfo& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::PeerInfo& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::PeerInfo& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::PeerInfo& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::PeerInfo& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::ProofOfSpace> {
	void read(TypeInput& in, ::mmx::ProofOfSpace& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::ProofOfSpace& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::ProofOfSpace& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::ProofOfSpace& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::ProofOfSpace& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::ProofOfSpace& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::ProofOfTime> {
	void read(TypeInput& in, ::mmx::ProofOfTime& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::ProofOfTime& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::ProofOfTime& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::ProofOfTime& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::ProofOfTime& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::ProofOfTime& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::ProofResponse> {
	void read(TypeInput& in, ::mmx::ProofResponse& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::ProofResponse& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::ProofResponse& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::ProofResponse& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::ProofResponse& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::ProofResponse& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Request> {
	void read(TypeInput& in, ::mmx::Request& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Request& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Request& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Request& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Request& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Request& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Return> {
	void read(TypeInput& in, ::mmx::Return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::RouterBase> {
	void read(TypeInput& in, ::mmx::RouterBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::RouterBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::RouterBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::RouterBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::RouterBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::mmx::Router_discover> {
	void read(TypeInput& in, ::mmx::Router_discover& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Router_discover& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Router_discover& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Router_discover& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Router_discover& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_discover& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Router_discover_return> {
	void read(TypeInput& in, ::mmx::Router_discover_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Router_discover_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Router_discover_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Router_discover_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Router_discover_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_discover_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Router_fetch_block_at> {
	void read(TypeInput& in, ::mmx::Router_fetch_block_at& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Router_fetch_block_at& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Router_fetch_block_at& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Router_fetch_block_at& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Router_fetch_block_at& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_fetch_block_at& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Router_fetch_block_at_return> {
	void read(TypeInput& in, ::mmx::Router_fetch_block_at_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Router_fetch_block_at_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Router_fetch_block_at_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Router_fetch_block_at_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Router_fetch_block_at_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_fetch_block_at_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Router_get_blocks_at> {
	void read(TypeInput& in, ::mmx::Router_get_blocks_at& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Router_get_blocks_at& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Router_get_blocks_at& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Router_get_blocks_at& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Router_get_blocks_at& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_blocks_at& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Router_get_blocks_at_return> {
	void read(TypeInput& in, ::mmx::Router_get_blocks_at_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Router_get_blocks_at_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Router_get_blocks_at_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Router_get_blocks_at_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Router_get_blocks_at_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_blocks_at_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Router_get_connected_peers> {
	void read(TypeInput& in, ::mmx::Router_get_connected_peers& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Router_get_connected_peers& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Router_get_connected_peers& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Router_get_connected_peers& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Router_get_connected_peers& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_connected_peers& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Router_get_connected_peers_return> {
	void read(TypeInput& in, ::mmx::Router_get_connected_peers_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Router_get_connected_peers_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Router_get_connected_peers_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Router_get_connected_peers_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Router_get_connected_peers_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_connected_peers_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Router_get_farmer_credits> {
	void read(TypeInput& in, ::mmx::Router_get_farmer_credits& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Router_get_farmer_credits& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Router_get_farmer_credits& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Router_get_farmer_credits& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Router_get_farmer_credits& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_farmer_credits& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Router_get_farmer_credits_return> {
	void read(TypeInput& in, ::mmx::Router_get_farmer_credits_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Router_get_farmer_credits_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Router_get_farmer_credits_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Router_get_farmer_credits_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Router_get_farmer_credits_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_farmer_credits_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Router_get_id> {
	void read(TypeInput& in, ::mmx::Router_get_id& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Router_get_id& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Router_get_id& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Router_get_id& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Router_get_id& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_id& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Router_get_id_return> {
	void read(TypeInput& in, ::mmx::Router_get_id_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Router_get_id_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Router_get_id_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Router_get_id_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Router_get_id_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_id_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Router_get_info> {
	void read(TypeInput& in, ::mmx::Router_get_info& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Router_get_info& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Router_get_info& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Router_get_info& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Router_get_info& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_info& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Router_get_info_return> {
	void read(TypeInput& in, ::mmx::Router_get_info_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Router_get_info_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Router_get_info_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Router_get_info_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Router_get_info_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_info_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Router_get_known_peers> {
	void read(TypeInput& in, ::mmx::Router_get_known_peers& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Router_get_known_peers& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Router_get_known_peers& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Router_get_known_peers& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Router_get_known_peers& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_known_peers& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Router_get_known_peers_return> {
	void read(TypeInput& in, ::mmx::Router_get_known_peers_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Router_get_known_peers_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Router_get_known_peers_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Router_get_known_peers_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Router_get_known_peers_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_known_peers_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Router_get_peer_info> {
	void read(TypeInput& in, ::mmx::Router_get_peer_info& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Router_get_peer_info& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Router_get_peer_info& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Router_get_peer_info& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Router_get_peer_info& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_peer_info& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Router_get_peer_info_return> {
	void read(TypeInput& in, ::mmx::Router_get_peer_info_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Router_get_peer_info_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Router_get_peer_info_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Router_get_peer_info_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Router_get_peer_info_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_peer_info_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Router_get_peers> {
	void read(TypeInput& in, ::mmx::Router_get_peers& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Router_get_peers& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Router_get_peers& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Router_get_peers& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Router_get_peers& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_peers& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Router_get_peers_return> {
	void read(TypeInput& in, ::mmx::Router_get_peers_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Router_get_peers_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Router_get_peers_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Router_get_peers_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Router_get_peers_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_peers_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Router_sign_msg> {
	void read(TypeInput& in, ::mmx::Router_sign_msg& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Router_sign_msg& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Router_sign_msg& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Router_sign_msg& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Router_sign_msg& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_sign_msg& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Router_sign_msg_return> {
	void read(TypeInput& in, ::mmx::Router_sign_msg_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Router_sign_msg_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Router_sign_msg_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Router_sign_msg_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Router_sign_msg_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_sign_msg_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Solution> {
	void read(TypeInput& in, ::mmx::Solution& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Solution& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Solution& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Solution& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Solution& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Solution& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::TimeInfusion> {
	void read(TypeInput& in, ::mmx::TimeInfusion& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::TimeInfusion& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::TimeInfusion& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::TimeInfusion& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::TimeInfusion& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::TimeInfusion& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::TimeLordBase> {
	void read(TypeInput& in, ::mmx::TimeLordBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::TimeLordBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::TimeLordBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::TimeLordBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::TimeLordBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::mmx::TimeLord_stop_vdf> {
	void read(TypeInput& in, ::mmx::TimeLord_stop_vdf& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::TimeLord_stop_vdf& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::TimeLord_stop_vdf& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::TimeLord_stop_vdf& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::TimeLord_stop_vdf& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::TimeLord_stop_vdf& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::TimeLord_stop_vdf_return> {
	void read(TypeInput& in, ::mmx::TimeLord_stop_vdf_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::TimeLord_stop_vdf_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::TimeLord_stop_vdf_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::TimeLord_stop_vdf_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::TimeLord_stop_vdf_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::TimeLord_stop_vdf_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Transaction> {
	void read(TypeInput& in, ::mmx::Transaction& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Transaction& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Transaction& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Transaction& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Transaction& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Transaction& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::TransactionBase> {
	void read(TypeInput& in, ::mmx::TransactionBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::TransactionBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::TransactionBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::TransactionBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::TransactionBase& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::TransactionBase& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::WalletBase> {
	void read(TypeInput& in, ::mmx::WalletBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::WalletBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::WalletBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::WalletBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::WalletBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::mmx::Wallet_add_account> {
	void read(TypeInput& in, ::mmx::Wallet_add_account& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_add_account& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_add_account& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_add_account& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_add_account& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_add_account& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_add_account_return> {
	void read(TypeInput& in, ::mmx::Wallet_add_account_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_add_account_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_add_account_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_add_account_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_add_account_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_add_account_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_deploy> {
	void read(TypeInput& in, ::mmx::Wallet_deploy& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_deploy& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_deploy& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_deploy& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_deploy& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_deploy& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_deploy_return> {
	void read(TypeInput& in, ::mmx::Wallet_deploy_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_deploy_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_deploy_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_deploy_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_deploy_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_deploy_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_gather_utxos_for> {
	void read(TypeInput& in, ::mmx::Wallet_gather_utxos_for& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_gather_utxos_for& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_gather_utxos_for& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_gather_utxos_for& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_gather_utxos_for& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_gather_utxos_for& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_gather_utxos_for_return> {
	void read(TypeInput& in, ::mmx::Wallet_gather_utxos_for_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_gather_utxos_for_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_gather_utxos_for_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_gather_utxos_for_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_gather_utxos_for_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_gather_utxos_for_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_get_accounts> {
	void read(TypeInput& in, ::mmx::Wallet_get_accounts& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_get_accounts& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_get_accounts& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_get_accounts& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_get_accounts& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_accounts& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_get_accounts_return> {
	void read(TypeInput& in, ::mmx::Wallet_get_accounts_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_get_accounts_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_get_accounts_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_get_accounts_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_get_accounts_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_accounts_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_get_address> {
	void read(TypeInput& in, ::mmx::Wallet_get_address& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_get_address& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_get_address& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_get_address& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_get_address& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_address& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_get_address_return> {
	void read(TypeInput& in, ::mmx::Wallet_get_address_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_get_address_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_get_address_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_get_address_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_get_address_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_address_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_get_all_addresses> {
	void read(TypeInput& in, ::mmx::Wallet_get_all_addresses& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_get_all_addresses& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_get_all_addresses& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_get_all_addresses& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_get_all_addresses& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_all_addresses& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_get_all_addresses_return> {
	void read(TypeInput& in, ::mmx::Wallet_get_all_addresses_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_get_all_addresses_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_get_all_addresses_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_get_all_addresses_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_get_all_addresses_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_all_addresses_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_get_all_farmer_keys> {
	void read(TypeInput& in, ::mmx::Wallet_get_all_farmer_keys& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_get_all_farmer_keys& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_get_all_farmer_keys& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_get_all_farmer_keys& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_get_all_farmer_keys& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_all_farmer_keys& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_get_all_farmer_keys_return> {
	void read(TypeInput& in, ::mmx::Wallet_get_all_farmer_keys_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_get_all_farmer_keys_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_get_all_farmer_keys_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_get_all_farmer_keys_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_get_all_farmer_keys_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_all_farmer_keys_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_get_balance> {
	void read(TypeInput& in, ::mmx::Wallet_get_balance& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_get_balance& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_get_balance& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_get_balance& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_get_balance& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_balance& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_get_balance_return> {
	void read(TypeInput& in, ::mmx::Wallet_get_balance_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_get_balance_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_get_balance_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_get_balance_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_get_balance_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_balance_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_get_balances> {
	void read(TypeInput& in, ::mmx::Wallet_get_balances& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_get_balances& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_get_balances& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_get_balances& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_get_balances& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_balances& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_get_balances_return> {
	void read(TypeInput& in, ::mmx::Wallet_get_balances_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_get_balances_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_get_balances_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_get_balances_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_get_balances_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_balances_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_get_contracts> {
	void read(TypeInput& in, ::mmx::Wallet_get_contracts& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_get_contracts& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_get_contracts& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_get_contracts& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_get_contracts& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_contracts& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_get_contracts_return> {
	void read(TypeInput& in, ::mmx::Wallet_get_contracts_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_get_contracts_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_get_contracts_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_get_contracts_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_get_contracts_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_contracts_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_get_farmer_keys> {
	void read(TypeInput& in, ::mmx::Wallet_get_farmer_keys& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_get_farmer_keys& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_get_farmer_keys& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_get_farmer_keys& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_get_farmer_keys& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_farmer_keys& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_get_farmer_keys_return> {
	void read(TypeInput& in, ::mmx::Wallet_get_farmer_keys_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_get_farmer_keys_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_get_farmer_keys_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_get_farmer_keys_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_get_farmer_keys_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_farmer_keys_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_get_history> {
	void read(TypeInput& in, ::mmx::Wallet_get_history& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_get_history& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_get_history& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_get_history& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_get_history& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_history& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_get_history_return> {
	void read(TypeInput& in, ::mmx::Wallet_get_history_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_get_history_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_get_history_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_get_history_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_get_history_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_history_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_get_master_seed> {
	void read(TypeInput& in, ::mmx::Wallet_get_master_seed& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_get_master_seed& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_get_master_seed& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_get_master_seed& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_get_master_seed& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_master_seed& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_get_master_seed_return> {
	void read(TypeInput& in, ::mmx::Wallet_get_master_seed_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_get_master_seed_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_get_master_seed_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_get_master_seed_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_get_master_seed_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_master_seed_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_get_reserved_balances> {
	void read(TypeInput& in, ::mmx::Wallet_get_reserved_balances& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_get_reserved_balances& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_get_reserved_balances& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_get_reserved_balances& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_get_reserved_balances& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_reserved_balances& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_get_reserved_balances_return> {
	void read(TypeInput& in, ::mmx::Wallet_get_reserved_balances_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_get_reserved_balances_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_get_reserved_balances_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_get_reserved_balances_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_get_reserved_balances_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_reserved_balances_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_get_stxo_list> {
	void read(TypeInput& in, ::mmx::Wallet_get_stxo_list& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_get_stxo_list& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_get_stxo_list& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_get_stxo_list& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_get_stxo_list& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_stxo_list& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_get_stxo_list_return> {
	void read(TypeInput& in, ::mmx::Wallet_get_stxo_list_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_get_stxo_list_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_get_stxo_list_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_get_stxo_list_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_get_stxo_list_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_stxo_list_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_get_stxo_list_for> {
	void read(TypeInput& in, ::mmx::Wallet_get_stxo_list_for& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_get_stxo_list_for& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_get_stxo_list_for& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_get_stxo_list_for& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_get_stxo_list_for& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_stxo_list_for& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_get_stxo_list_for_return> {
	void read(TypeInput& in, ::mmx::Wallet_get_stxo_list_for_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_get_stxo_list_for_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_get_stxo_list_for_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_get_stxo_list_for_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_get_stxo_list_for_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_stxo_list_for_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_get_utxo_list> {
	void read(TypeInput& in, ::mmx::Wallet_get_utxo_list& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_get_utxo_list& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_get_utxo_list& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_get_utxo_list& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_get_utxo_list& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_utxo_list& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_get_utxo_list_return> {
	void read(TypeInput& in, ::mmx::Wallet_get_utxo_list_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_get_utxo_list_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_get_utxo_list_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_get_utxo_list_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_get_utxo_list_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_utxo_list_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_get_utxo_list_for> {
	void read(TypeInput& in, ::mmx::Wallet_get_utxo_list_for& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_get_utxo_list_for& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_get_utxo_list_for& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_get_utxo_list_for& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_get_utxo_list_for& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_utxo_list_for& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_get_utxo_list_for_return> {
	void read(TypeInput& in, ::mmx::Wallet_get_utxo_list_for_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_get_utxo_list_for_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_get_utxo_list_for_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_get_utxo_list_for_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_get_utxo_list_for_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_utxo_list_for_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_mark_spent> {
	void read(TypeInput& in, ::mmx::Wallet_mark_spent& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_mark_spent& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_mark_spent& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_mark_spent& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_mark_spent& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_mark_spent& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_mark_spent_return> {
	void read(TypeInput& in, ::mmx::Wallet_mark_spent_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_mark_spent_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_mark_spent_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_mark_spent_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_mark_spent_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_mark_spent_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_mint> {
	void read(TypeInput& in, ::mmx::Wallet_mint& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_mint& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_mint& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_mint& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_mint& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_mint& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_mint_return> {
	void read(TypeInput& in, ::mmx::Wallet_mint_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_mint_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_mint_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_mint_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_mint_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_mint_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_release> {
	void read(TypeInput& in, ::mmx::Wallet_release& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_release& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_release& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_release& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_release& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_release& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_release_return> {
	void read(TypeInput& in, ::mmx::Wallet_release_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_release_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_release_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_release_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_release_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_release_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_release_all> {
	void read(TypeInput& in, ::mmx::Wallet_release_all& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_release_all& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_release_all& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_release_all& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_release_all& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_release_all& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_release_all_return> {
	void read(TypeInput& in, ::mmx::Wallet_release_all_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_release_all_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_release_all_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_release_all_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_release_all_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_release_all_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_reserve> {
	void read(TypeInput& in, ::mmx::Wallet_reserve& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_reserve& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_reserve& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_reserve& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_reserve& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_reserve& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_reserve_return> {
	void read(TypeInput& in, ::mmx::Wallet_reserve_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_reserve_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_reserve_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_reserve_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_reserve_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_reserve_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_send> {
	void read(TypeInput& in, ::mmx::Wallet_send& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_send& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_send& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_send& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_send& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_send& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_send_return> {
	void read(TypeInput& in, ::mmx::Wallet_send_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_send_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_send_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_send_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_send_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_send_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_send_from> {
	void read(TypeInput& in, ::mmx::Wallet_send_from& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_send_from& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_send_from& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_send_from& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_send_from& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_send_from& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_send_from_return> {
	void read(TypeInput& in, ::mmx::Wallet_send_from_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_send_from_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_send_from_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_send_from_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_send_from_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_send_from_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_sign_msg> {
	void read(TypeInput& in, ::mmx::Wallet_sign_msg& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_sign_msg& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_sign_msg& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_sign_msg& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_sign_msg& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_sign_msg& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_sign_msg_return> {
	void read(TypeInput& in, ::mmx::Wallet_sign_msg_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_sign_msg_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_sign_msg_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_sign_msg_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_sign_msg_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_sign_msg_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_sign_off> {
	void read(TypeInput& in, ::mmx::Wallet_sign_off& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_sign_off& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_sign_off& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_sign_off& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_sign_off& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_sign_off& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::Wallet_sign_off_return> {
	void read(TypeInput& in, ::mmx::Wallet_sign_off_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::Wallet_sign_off_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::Wallet_sign_off_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::Wallet_sign_off_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::Wallet_sign_off_return& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_sign_off_return& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::WebAPIBase> {
	void read(TypeInput& in, ::mmx::WebAPIBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::WebAPIBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::WebAPIBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::WebAPIBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::WebAPIBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::mmx::account_t> {
	void read(TypeInput& in, ::mmx::account_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::account_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::account_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::account_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::account_t& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::account_t& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::addr_t> {
	void read(TypeInput& in, ::mmx::addr_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::addr_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::addr_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::addr_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::addr_t& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::addr_t& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::bls_pubkey_t> {
	void read(TypeInput& in, ::mmx::bls_pubkey_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::bls_pubkey_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::bls_pubkey_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::bls_pubkey_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::bls_pubkey_t& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::bls_pubkey_t& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::bls_signature_t> {
	void read(TypeInput& in, ::mmx::bls_signature_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::bls_signature_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::bls_signature_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::bls_signature_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::bls_signature_t& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::bls_signature_t& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::hash_t> {
	void read(TypeInput& in, ::mmx::hash_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::hash_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::hash_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::hash_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::hash_t& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::hash_t& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::node_info_t> {
	void read(TypeInput& in, ::mmx::node_info_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::node_info_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::node_info_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::node_info_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::node_info_t& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::node_info_t& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::node_type_e> {
	void read(TypeInput& in, ::mmx::node_type_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::node_type_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::node_type_e& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::node_type_e& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::node_type_e& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::node_type_e& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::peer_info_t> {
	void read(TypeInput& in, ::mmx::peer_info_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::peer_info_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::peer_info_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::peer_info_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::peer_info_t& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::peer_info_t& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::permission_e> {
	void read(TypeInput& in, ::mmx::permission_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::permission_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::permission_e& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::permission_e& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::permission_e& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::permission_e& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::pubkey_t> {
	void read(TypeInput& in, ::mmx::pubkey_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::pubkey_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::pubkey_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::pubkey_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::pubkey_t& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::pubkey_t& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::signature_t> {
	void read(TypeInput& in, ::mmx::signature_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::signature_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::signature_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::signature_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::signature_t& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::signature_t& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::skey_t> {
	void read(TypeInput& in, ::mmx::skey_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::skey_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::skey_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::skey_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::skey_t& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::skey_t& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::spend_options_t> {
	void read(TypeInput& in, ::mmx::spend_options_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::spend_options_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::spend_options_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::spend_options_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::spend_options_t& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::spend_options_t& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::stxo_entry_t> {
	void read(TypeInput& in, ::mmx::stxo_entry_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::stxo_entry_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::stxo_entry_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::stxo_entry_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::stxo_entry_t& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::stxo_entry_t& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::stxo_t> {
	void read(TypeInput& in, ::mmx::stxo_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::stxo_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::stxo_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::stxo_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::stxo_t& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::stxo_t& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::time_segment_t> {
	void read(TypeInput& in, ::mmx::time_segment_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::time_segment_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::time_segment_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::time_segment_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::time_segment_t& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::time_segment_t& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::tx_entry_t> {
	void read(TypeInput& in, ::mmx::tx_entry_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::tx_entry_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::tx_entry_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::tx_entry_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::tx_entry_t& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::tx_entry_t& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::tx_in_t> {
	void read(TypeInput& in, ::mmx::tx_in_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::tx_in_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::tx_in_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::tx_in_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::tx_in_t& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::tx_in_t& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::tx_info_t> {
	void read(TypeInput& in, ::mmx::tx_info_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::tx_info_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::tx_info_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::tx_info_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::tx_info_t& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::tx_info_t& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::tx_out_t> {
	void read(TypeInput& in, ::mmx::tx_out_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::tx_out_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::tx_out_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::tx_out_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::tx_out_t& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::tx_out_t& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::tx_type_e> {
	void read(TypeInput& in, ::mmx::tx_type_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::tx_type_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::tx_type_e& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::tx_type_e& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::tx_type_e& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::tx_type_e& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::txi_info_t> {
	void read(TypeInput& in, ::mmx::txi_info_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::txi_info_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::txi_info_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::txi_info_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::txi_info_t& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::txi_info_t& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::txio_key_t> {
	void read(TypeInput& in, ::mmx::txio_key_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::txio_key_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::txio_key_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::txio_key_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::txio_key_t& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::txio_key_t& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::txo_info_t> {
	void read(TypeInput& in, ::mmx::txo_info_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::txo_info_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::txo_info_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::txo_info_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::txo_info_t& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::txo_info_t& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::uint_fraction_t> {
	void read(TypeInput& in, ::mmx::uint_fraction_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::uint_fraction_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::uint_fraction_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::uint_fraction_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::uint_fraction_t& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::uint_fraction_t& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::ulong_fraction_t> {
	void read(TypeInput& in, ::mmx::ulong_fraction_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::ulong_fraction_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::ulong_fraction_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::ulong_fraction_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::ulong_fraction_t& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::ulong_fraction_t& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::utxo_entry_t> {
	void read(TypeInput& in, ::mmx::utxo_entry_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::utxo_entry_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::utxo_entry_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::utxo_entry_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::utxo_entry_t& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::utxo_entry_t& value, bool special = false);
};

/// \private
template<>
struct type<::mmx::utxo_t> {
	void read(TypeInput& in, ::mmx::utxo_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::mmx::utxo_t& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::mmx::utxo_t& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::mmx::utxo_t& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::mmx::utxo_t& value) {
		vnx::accept(visitor, value);
	}
	const TypeCode* get_type_code();
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::utxo_t& value, bool special = false);
};


} // namespace vnx

#endif // INCLUDE_mmx_PACKAGE_HXX_
