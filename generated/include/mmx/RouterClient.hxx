
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_mmx_Router_CLIENT_HXX_
#define INCLUDE_mmx_Router_CLIENT_HXX_

#include <vnx/Client.h>
#include <mmx/Block.hxx>
#include <mmx/PeerInfo.hxx>
#include <mmx/ProofOfTime.hxx>
#include <mmx/ProofResponse.hxx>
#include <mmx/Transaction.hxx>
#include <mmx/hash_t.hpp>
#include <mmx/node_info_t.hxx>
#include <mmx/node_type_e.hxx>
#include <mmx/pubkey_t.hpp>
#include <mmx/signature_t.hpp>
#include <vnx/TopicPtr.hpp>
#include <vnx/addons/MsgServer.h>


namespace mmx {

class RouterClient : public vnx::Client {
public:
	RouterClient(const std::string& service_name);
	
	RouterClient(vnx::Hash64 service_addr);
	
	void discover();
	
	void discover_async();
	
	::mmx::hash_t get_id();
	
	::mmx::node_info_t get_info();
	
	std::pair<::mmx::pubkey_t, ::mmx::signature_t> sign_msg(const ::mmx::hash_t& msg = ::mmx::hash_t());
	
	std::vector<std::string> get_peers(const uint32_t& max_count = 10);
	
	std::vector<std::string> get_known_peers();
	
	std::vector<std::string> get_connected_peers();
	
	std::shared_ptr<const ::mmx::PeerInfo> get_peer_info();
	
	std::vector<std::pair<std::string, uint32_t>> get_farmer_credits();
	
	std::vector<std::shared_ptr<const ::mmx::Block>> get_blocks_at(const uint32_t& height = 0);
	
	std::shared_ptr<const ::mmx::Block> fetch_block(const ::mmx::hash_t& hash = ::mmx::hash_t(), const vnx::optional<std::string>& address = nullptr);
	
	std::shared_ptr<const ::mmx::Block> fetch_block_at(const uint32_t& height = 0, const std::string& address = "");
	
	::vnx::Object vnx_get_config_object();
	
	::vnx::Variant vnx_get_config(const std::string& name = "");
	
	void vnx_set_config_object(const ::vnx::Object& config = ::vnx::Object());
	
	void vnx_set_config_object_async(const ::vnx::Object& config = ::vnx::Object());
	
	void vnx_set_config(const std::string& name = "", const ::vnx::Variant& value = ::vnx::Variant());
	
	void vnx_set_config_async(const std::string& name = "", const ::vnx::Variant& value = ::vnx::Variant());
	
	::vnx::TypeCode vnx_get_type_code();
	
	std::shared_ptr<const ::vnx::ModuleInfo> vnx_get_module_info();
	
	void vnx_restart();
	
	void vnx_restart_async();
	
	void vnx_stop();
	
	void vnx_stop_async();
	
	vnx::bool_t vnx_self_test();
	
};


} // namespace mmx

#endif // INCLUDE_mmx_Router_CLIENT_HXX_
