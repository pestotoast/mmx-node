
// AUTO GENERATED by vnxcppcodegen

#include <mmx/Block.hxx>
#include <mmx/BlockHeader.hxx>
#include <mmx/ChainParams.hxx>
#include <mmx/Challenge.hxx>
#include <mmx/Contract.hxx>
#include <mmx/FarmInfo.hxx>
#include <mmx/FarmerBase.hxx>
#include <mmx/Farmer_get_mac_addr.hxx>
#include <mmx/Farmer_get_mac_addr_return.hxx>
#include <mmx/Farmer_sign_block.hxx>
#include <mmx/Farmer_sign_block_return.hxx>
#include <mmx/FarmerKeys.hxx>
#include <mmx/HarvesterBase.hxx>
#include <mmx/Harvester_get_farm_info.hxx>
#include <mmx/Harvester_get_farm_info_return.hxx>
#include <mmx/Harvester_get_total_bytes.hxx>
#include <mmx/Harvester_get_total_bytes_return.hxx>
#include <mmx/Harvester_reload.hxx>
#include <mmx/Harvester_reload_return.hxx>
#include <mmx/IntervalRequest.hxx>
#include <mmx/KeyFile.hxx>
#include <mmx/NodeBase.hxx>
#include <mmx/Node_add_block.hxx>
#include <mmx/Node_add_block_return.hxx>
#include <mmx/Node_add_transaction.hxx>
#include <mmx/Node_add_transaction_return.hxx>
#include <mmx/Node_get_balance.hxx>
#include <mmx/Node_get_balance_return.hxx>
#include <mmx/Node_get_block.hxx>
#include <mmx/Node_get_block_return.hxx>
#include <mmx/Node_get_block_at.hxx>
#include <mmx/Node_get_block_at_return.hxx>
#include <mmx/Node_get_block_hash.hxx>
#include <mmx/Node_get_block_hash_return.hxx>
#include <mmx/Node_get_contract.hxx>
#include <mmx/Node_get_contract_return.hxx>
#include <mmx/Node_get_header_at.hxx>
#include <mmx/Node_get_header_at_return.hxx>
#include <mmx/Node_get_height.hxx>
#include <mmx/Node_get_height_return.hxx>
#include <mmx/Node_get_history_for.hxx>
#include <mmx/Node_get_history_for_return.hxx>
#include <mmx/Node_get_params.hxx>
#include <mmx/Node_get_params_return.hxx>
#include <mmx/Node_get_stxo_list.hxx>
#include <mmx/Node_get_stxo_list_return.hxx>
#include <mmx/Node_get_synced_height.hxx>
#include <mmx/Node_get_synced_height_return.hxx>
#include <mmx/Node_get_total_balance.hxx>
#include <mmx/Node_get_total_balance_return.hxx>
#include <mmx/Node_get_total_supply.hxx>
#include <mmx/Node_get_total_supply_return.hxx>
#include <mmx/Node_get_transaction.hxx>
#include <mmx/Node_get_transaction_return.hxx>
#include <mmx/Node_get_transactions.hxx>
#include <mmx/Node_get_transactions_return.hxx>
#include <mmx/Node_get_tx_height.hxx>
#include <mmx/Node_get_tx_height_return.hxx>
#include <mmx/Node_get_txo_info.hxx>
#include <mmx/Node_get_txo_info_return.hxx>
#include <mmx/Node_get_utxo_list.hxx>
#include <mmx/Node_get_utxo_list_return.hxx>
#include <mmx/Node_start_sync.hxx>
#include <mmx/Node_start_sync_return.hxx>
#include <mmx/Operation.hxx>
#include <mmx/PeerInfo.hxx>
#include <mmx/ProofOfSpace.hxx>
#include <mmx/ProofOfTime.hxx>
#include <mmx/ProofResponse.hxx>
#include <mmx/Request.hxx>
#include <mmx/Return.hxx>
#include <mmx/RouterBase.hxx>
#include <mmx/Router_discover.hxx>
#include <mmx/Router_discover_return.hxx>
#include <mmx/Router_get_blocks_at.hxx>
#include <mmx/Router_get_blocks_at_return.hxx>
#include <mmx/Router_get_connected_peers.hxx>
#include <mmx/Router_get_connected_peers_return.hxx>
#include <mmx/Router_get_id.hxx>
#include <mmx/Router_get_id_return.hxx>
#include <mmx/Router_get_known_peers.hxx>
#include <mmx/Router_get_known_peers_return.hxx>
#include <mmx/Router_get_peer_info.hxx>
#include <mmx/Router_get_peer_info_return.hxx>
#include <mmx/Router_get_peers.hxx>
#include <mmx/Router_get_peers_return.hxx>
#include <mmx/Solution.hxx>
#include <mmx/TimeInfusion.hxx>
#include <mmx/TimeLordBase.hxx>
#include <mmx/TimeLord_stop_vdf.hxx>
#include <mmx/TimeLord_stop_vdf_return.hxx>
#include <mmx/Transaction.hxx>
#include <mmx/WalletBase.hxx>
#include <mmx/Wallet_get_address.hxx>
#include <mmx/Wallet_get_address_return.hxx>
#include <mmx/Wallet_get_all_farmer_keys.hxx>
#include <mmx/Wallet_get_all_farmer_keys_return.hxx>
#include <mmx/Wallet_get_balance.hxx>
#include <mmx/Wallet_get_balance_return.hxx>
#include <mmx/Wallet_get_farmer_keys.hxx>
#include <mmx/Wallet_get_farmer_keys_return.hxx>
#include <mmx/Wallet_get_history.hxx>
#include <mmx/Wallet_get_history_return.hxx>
#include <mmx/Wallet_get_master_seed.hxx>
#include <mmx/Wallet_get_master_seed_return.hxx>
#include <mmx/Wallet_get_stxo_list.hxx>
#include <mmx/Wallet_get_stxo_list_return.hxx>
#include <mmx/Wallet_get_stxo_list_for.hxx>
#include <mmx/Wallet_get_stxo_list_for_return.hxx>
#include <mmx/Wallet_get_utxo_list.hxx>
#include <mmx/Wallet_get_utxo_list_return.hxx>
#include <mmx/Wallet_get_utxo_list_for.hxx>
#include <mmx/Wallet_get_utxo_list_for_return.hxx>
#include <mmx/Wallet_send.hxx>
#include <mmx/Wallet_send_return.hxx>
#include <mmx/peer_info_t.hxx>
#include <mmx/permission_e.hxx>
#include <mmx/stxo_entry_t.hxx>
#include <mmx/time_segment_t.hxx>
#include <mmx/tx_entry_t.hxx>
#include <mmx/tx_in_t.hxx>
#include <mmx/tx_out_t.hxx>
#include <mmx/tx_type_e.hxx>
#include <mmx/txio_key_t.hxx>
#include <mmx/txo_info_t.hxx>
#include <mmx/uint_fraction_t.hxx>
#include <mmx/ulong_fraction_t.hxx>
#include <mmx/utxo_entry_t.hxx>
#include <mmx/utxo_t.hxx>
#include <mmx/addr_t.hpp>
#include <mmx/bls_pubkey_t.hpp>
#include <mmx/bls_signature_t.hpp>
#include <mmx/hash_t.hpp>
#include <mmx/pubkey_t.hpp>
#include <mmx/signature_t.hpp>
#include <mmx/skey_t.hpp>

#include <mmx/package.hxx>
#include <vnx/vnx.h>



namespace vnx {

void type<::mmx::Block>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Block());
}

void type<::mmx::Block>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Block& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::BlockHeader>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::BlockHeader());
}

void type<::mmx::BlockHeader>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::BlockHeader& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::ChainParams>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::ChainParams());
}

void type<::mmx::ChainParams>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::ChainParams& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Challenge>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Challenge());
}

void type<::mmx::Challenge>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Challenge& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Contract>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Contract());
}

void type<::mmx::Contract>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Contract& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::FarmInfo>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::FarmInfo());
}

void type<::mmx::FarmInfo>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::FarmInfo& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Farmer_get_mac_addr>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Farmer_get_mac_addr());
}

void type<::mmx::Farmer_get_mac_addr>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Farmer_get_mac_addr& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Farmer_get_mac_addr_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Farmer_get_mac_addr_return());
}

void type<::mmx::Farmer_get_mac_addr_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Farmer_get_mac_addr_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Farmer_sign_block>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Farmer_sign_block());
}

void type<::mmx::Farmer_sign_block>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Farmer_sign_block& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Farmer_sign_block_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Farmer_sign_block_return());
}

void type<::mmx::Farmer_sign_block_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Farmer_sign_block_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::FarmerKeys>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::FarmerKeys());
}

void type<::mmx::FarmerKeys>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::FarmerKeys& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Harvester_get_farm_info>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Harvester_get_farm_info());
}

void type<::mmx::Harvester_get_farm_info>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Harvester_get_farm_info& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Harvester_get_farm_info_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Harvester_get_farm_info_return());
}

void type<::mmx::Harvester_get_farm_info_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Harvester_get_farm_info_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Harvester_get_total_bytes>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Harvester_get_total_bytes());
}

void type<::mmx::Harvester_get_total_bytes>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Harvester_get_total_bytes& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Harvester_get_total_bytes_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Harvester_get_total_bytes_return());
}

void type<::mmx::Harvester_get_total_bytes_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Harvester_get_total_bytes_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Harvester_reload>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Harvester_reload());
}

void type<::mmx::Harvester_reload>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Harvester_reload& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Harvester_reload_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Harvester_reload_return());
}

void type<::mmx::Harvester_reload_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Harvester_reload_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::IntervalRequest>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::IntervalRequest());
}

void type<::mmx::IntervalRequest>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::IntervalRequest& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::KeyFile>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::KeyFile());
}

void type<::mmx::KeyFile>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::KeyFile& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_add_block>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_add_block());
}

void type<::mmx::Node_add_block>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_add_block& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_add_block_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_add_block_return());
}

void type<::mmx::Node_add_block_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_add_block_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_add_transaction>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_add_transaction());
}

void type<::mmx::Node_add_transaction>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_add_transaction& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_add_transaction_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_add_transaction_return());
}

void type<::mmx::Node_add_transaction_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_add_transaction_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_balance>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_balance());
}

void type<::mmx::Node_get_balance>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_balance& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_balance_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_balance_return());
}

void type<::mmx::Node_get_balance_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_balance_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_block>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_block());
}

void type<::mmx::Node_get_block>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_block& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_block_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_block_return());
}

void type<::mmx::Node_get_block_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_block_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_block_at>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_block_at());
}

void type<::mmx::Node_get_block_at>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_block_at& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_block_at_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_block_at_return());
}

void type<::mmx::Node_get_block_at_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_block_at_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_block_hash>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_block_hash());
}

void type<::mmx::Node_get_block_hash>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_block_hash& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_block_hash_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_block_hash_return());
}

void type<::mmx::Node_get_block_hash_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_block_hash_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_contract>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_contract());
}

void type<::mmx::Node_get_contract>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_contract& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_contract_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_contract_return());
}

void type<::mmx::Node_get_contract_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_contract_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_header_at>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_header_at());
}

void type<::mmx::Node_get_header_at>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_header_at& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_header_at_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_header_at_return());
}

void type<::mmx::Node_get_header_at_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_header_at_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_height>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_height());
}

void type<::mmx::Node_get_height>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_height& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_height_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_height_return());
}

void type<::mmx::Node_get_height_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_height_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_history_for>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_history_for());
}

void type<::mmx::Node_get_history_for>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_history_for& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_history_for_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_history_for_return());
}

void type<::mmx::Node_get_history_for_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_history_for_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_params>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_params());
}

void type<::mmx::Node_get_params>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_params& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_params_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_params_return());
}

void type<::mmx::Node_get_params_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_params_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_stxo_list>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_stxo_list());
}

void type<::mmx::Node_get_stxo_list>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_stxo_list& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_stxo_list_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_stxo_list_return());
}

void type<::mmx::Node_get_stxo_list_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_stxo_list_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_synced_height>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_synced_height());
}

void type<::mmx::Node_get_synced_height>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_synced_height& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_synced_height_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_synced_height_return());
}

void type<::mmx::Node_get_synced_height_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_synced_height_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_total_balance>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_total_balance());
}

void type<::mmx::Node_get_total_balance>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_total_balance& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_total_balance_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_total_balance_return());
}

void type<::mmx::Node_get_total_balance_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_total_balance_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_total_supply>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_total_supply());
}

void type<::mmx::Node_get_total_supply>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_total_supply& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_total_supply_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_total_supply_return());
}

void type<::mmx::Node_get_total_supply_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_total_supply_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_transaction>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_transaction());
}

void type<::mmx::Node_get_transaction>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_transaction& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_transaction_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_transaction_return());
}

void type<::mmx::Node_get_transaction_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_transaction_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_transactions>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_transactions());
}

void type<::mmx::Node_get_transactions>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_transactions& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_transactions_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_transactions_return());
}

void type<::mmx::Node_get_transactions_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_transactions_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_tx_height>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_tx_height());
}

void type<::mmx::Node_get_tx_height>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_tx_height& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_tx_height_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_tx_height_return());
}

void type<::mmx::Node_get_tx_height_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_tx_height_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_txo_info>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_txo_info());
}

void type<::mmx::Node_get_txo_info>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_txo_info& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_txo_info_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_txo_info_return());
}

void type<::mmx::Node_get_txo_info_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_txo_info_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_utxo_list>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_utxo_list());
}

void type<::mmx::Node_get_utxo_list>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_utxo_list& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_get_utxo_list_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_get_utxo_list_return());
}

void type<::mmx::Node_get_utxo_list_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_get_utxo_list_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_start_sync>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_start_sync());
}

void type<::mmx::Node_start_sync>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_start_sync& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Node_start_sync_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Node_start_sync_return());
}

void type<::mmx::Node_start_sync_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Node_start_sync_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Operation>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Operation());
}

void type<::mmx::Operation>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Operation& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::PeerInfo>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::PeerInfo());
}

void type<::mmx::PeerInfo>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::PeerInfo& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::ProofOfSpace>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::ProofOfSpace());
}

void type<::mmx::ProofOfSpace>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::ProofOfSpace& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::ProofOfTime>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::ProofOfTime());
}

void type<::mmx::ProofOfTime>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::ProofOfTime& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::ProofResponse>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::ProofResponse());
}

void type<::mmx::ProofResponse>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::ProofResponse& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Request>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Request());
}

void type<::mmx::Request>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Request& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Return());
}

void type<::mmx::Return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Router_discover>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_discover());
}

void type<::mmx::Router_discover>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_discover& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Router_discover_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_discover_return());
}

void type<::mmx::Router_discover_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_discover_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Router_get_blocks_at>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_get_blocks_at());
}

void type<::mmx::Router_get_blocks_at>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_blocks_at& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Router_get_blocks_at_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_get_blocks_at_return());
}

void type<::mmx::Router_get_blocks_at_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_blocks_at_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Router_get_connected_peers>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_get_connected_peers());
}

void type<::mmx::Router_get_connected_peers>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_connected_peers& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Router_get_connected_peers_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_get_connected_peers_return());
}

void type<::mmx::Router_get_connected_peers_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_connected_peers_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Router_get_id>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_get_id());
}

void type<::mmx::Router_get_id>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_id& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Router_get_id_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_get_id_return());
}

void type<::mmx::Router_get_id_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_id_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Router_get_known_peers>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_get_known_peers());
}

void type<::mmx::Router_get_known_peers>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_known_peers& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Router_get_known_peers_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_get_known_peers_return());
}

void type<::mmx::Router_get_known_peers_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_known_peers_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Router_get_peer_info>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_get_peer_info());
}

void type<::mmx::Router_get_peer_info>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_peer_info& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Router_get_peer_info_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_get_peer_info_return());
}

void type<::mmx::Router_get_peer_info_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_peer_info_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Router_get_peers>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_get_peers());
}

void type<::mmx::Router_get_peers>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_peers& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Router_get_peers_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Router_get_peers_return());
}

void type<::mmx::Router_get_peers_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Router_get_peers_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Solution>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Solution());
}

void type<::mmx::Solution>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Solution& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::TimeInfusion>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::TimeInfusion());
}

void type<::mmx::TimeInfusion>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::TimeInfusion& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::TimeLord_stop_vdf>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::TimeLord_stop_vdf());
}

void type<::mmx::TimeLord_stop_vdf>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::TimeLord_stop_vdf& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::TimeLord_stop_vdf_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::TimeLord_stop_vdf_return());
}

void type<::mmx::TimeLord_stop_vdf_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::TimeLord_stop_vdf_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Transaction>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Transaction());
}

void type<::mmx::Transaction>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Transaction& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Wallet_get_address>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_address());
}

void type<::mmx::Wallet_get_address>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_address& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Wallet_get_address_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_address_return());
}

void type<::mmx::Wallet_get_address_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_address_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Wallet_get_all_farmer_keys>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_all_farmer_keys());
}

void type<::mmx::Wallet_get_all_farmer_keys>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_all_farmer_keys& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Wallet_get_all_farmer_keys_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_all_farmer_keys_return());
}

void type<::mmx::Wallet_get_all_farmer_keys_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_all_farmer_keys_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Wallet_get_balance>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_balance());
}

void type<::mmx::Wallet_get_balance>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_balance& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Wallet_get_balance_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_balance_return());
}

void type<::mmx::Wallet_get_balance_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_balance_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Wallet_get_farmer_keys>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_farmer_keys());
}

void type<::mmx::Wallet_get_farmer_keys>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_farmer_keys& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Wallet_get_farmer_keys_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_farmer_keys_return());
}

void type<::mmx::Wallet_get_farmer_keys_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_farmer_keys_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Wallet_get_history>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_history());
}

void type<::mmx::Wallet_get_history>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_history& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Wallet_get_history_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_history_return());
}

void type<::mmx::Wallet_get_history_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_history_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Wallet_get_master_seed>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_master_seed());
}

void type<::mmx::Wallet_get_master_seed>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_master_seed& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Wallet_get_master_seed_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_master_seed_return());
}

void type<::mmx::Wallet_get_master_seed_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_master_seed_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Wallet_get_stxo_list>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_stxo_list());
}

void type<::mmx::Wallet_get_stxo_list>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_stxo_list& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Wallet_get_stxo_list_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_stxo_list_return());
}

void type<::mmx::Wallet_get_stxo_list_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_stxo_list_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Wallet_get_stxo_list_for>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_stxo_list_for());
}

void type<::mmx::Wallet_get_stxo_list_for>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_stxo_list_for& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Wallet_get_stxo_list_for_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_stxo_list_for_return());
}

void type<::mmx::Wallet_get_stxo_list_for_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_stxo_list_for_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Wallet_get_utxo_list>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_utxo_list());
}

void type<::mmx::Wallet_get_utxo_list>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_utxo_list& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Wallet_get_utxo_list_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_utxo_list_return());
}

void type<::mmx::Wallet_get_utxo_list_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_utxo_list_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Wallet_get_utxo_list_for>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_utxo_list_for());
}

void type<::mmx::Wallet_get_utxo_list_for>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_utxo_list_for& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Wallet_get_utxo_list_for_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_get_utxo_list_for_return());
}

void type<::mmx::Wallet_get_utxo_list_for_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_get_utxo_list_for_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Wallet_send>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_send());
}

void type<::mmx::Wallet_send>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_send& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::Wallet_send_return>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::Wallet_send_return());
}

void type<::mmx::Wallet_send_return>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::Wallet_send_return& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::addr_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::addr_t());
}

void type<::mmx::addr_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::addr_t& value, bool special) {
	const std::vector<int> tmp = {11, 32, 1};
	code.insert(code.end(), tmp.begin(), tmp.end());}

void type<::mmx::bls_pubkey_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::bls_pubkey_t());
}

void type<::mmx::bls_pubkey_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::bls_pubkey_t& value, bool special) {
	const std::vector<int> tmp = {11, 48, 1};
	code.insert(code.end(), tmp.begin(), tmp.end());}

void type<::mmx::bls_signature_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::bls_signature_t());
}

void type<::mmx::bls_signature_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::bls_signature_t& value, bool special) {
	const std::vector<int> tmp = {11, 96, 1};
	code.insert(code.end(), tmp.begin(), tmp.end());}

void type<::mmx::hash_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::hash_t());
}

void type<::mmx::hash_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::hash_t& value, bool special) {
	const std::vector<int> tmp = {11, 32, 1};
	code.insert(code.end(), tmp.begin(), tmp.end());}

void type<::mmx::peer_info_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::peer_info_t());
}

void type<::mmx::peer_info_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::peer_info_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::permission_e>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::permission_e());
}

void type<::mmx::permission_e>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::permission_e& value, bool special) {
	if(!special || value.is_valid()) {
		code.push_back(CODE_STRING);
	} else {
		code.push_back(CODE_UINT32);
	}
}

void type<::mmx::pubkey_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::pubkey_t());
}

void type<::mmx::pubkey_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::pubkey_t& value, bool special) {
	const std::vector<int> tmp = {11, 33, 1};
	code.insert(code.end(), tmp.begin(), tmp.end());}

void type<::mmx::signature_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::signature_t());
}

void type<::mmx::signature_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::signature_t& value, bool special) {
	const std::vector<int> tmp = {11, 64, 1};
	code.insert(code.end(), tmp.begin(), tmp.end());}

void type<::mmx::skey_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::skey_t());
}

void type<::mmx::skey_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::skey_t& value, bool special) {
	const std::vector<int> tmp = {11, 32, 1};
	code.insert(code.end(), tmp.begin(), tmp.end());}

void type<::mmx::stxo_entry_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::stxo_entry_t());
}

void type<::mmx::stxo_entry_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::stxo_entry_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::time_segment_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::time_segment_t());
}

void type<::mmx::time_segment_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::time_segment_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::tx_entry_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::tx_entry_t());
}

void type<::mmx::tx_entry_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::tx_entry_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::tx_in_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::tx_in_t());
}

void type<::mmx::tx_in_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::tx_in_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::tx_out_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::tx_out_t());
}

void type<::mmx::tx_out_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::tx_out_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::tx_type_e>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::tx_type_e());
}

void type<::mmx::tx_type_e>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::tx_type_e& value, bool special) {
	if(!special || value.is_valid()) {
		code.push_back(CODE_STRING);
	} else {
		code.push_back(CODE_UINT32);
	}
}

void type<::mmx::txio_key_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::txio_key_t());
}

void type<::mmx::txio_key_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::txio_key_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::txo_info_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::txo_info_t());
}

void type<::mmx::txo_info_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::txo_info_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::uint_fraction_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::uint_fraction_t());
}

void type<::mmx::uint_fraction_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::uint_fraction_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::ulong_fraction_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::ulong_fraction_t());
}

void type<::mmx::ulong_fraction_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::ulong_fraction_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::utxo_entry_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::utxo_entry_t());
}

void type<::mmx::utxo_entry_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::utxo_entry_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}

void type<::mmx::utxo_t>::create_dynamic_code(std::vector<uint16_t>& code) {
	create_dynamic_code(code, ::mmx::utxo_t());
}

void type<::mmx::utxo_t>::create_dynamic_code(std::vector<uint16_t>& code, const ::mmx::utxo_t& value, bool special) {
	code.push_back(CODE_OBJECT);
}


} // namespace vnx


namespace mmx {


static void register_all_types() {
	vnx::register_type_code(::mmx::Block::static_create_type_code());
	vnx::register_type_code(::mmx::BlockHeader::static_create_type_code());
	vnx::register_type_code(::mmx::ChainParams::static_create_type_code());
	vnx::register_type_code(::mmx::Challenge::static_create_type_code());
	vnx::register_type_code(::mmx::Contract::static_create_type_code());
	vnx::register_type_code(::mmx::FarmInfo::static_create_type_code());
	vnx::register_type_code(::mmx::FarmerBase::static_create_type_code());
	vnx::register_type_code(::mmx::Farmer_get_mac_addr::static_create_type_code());
	vnx::register_type_code(::mmx::Farmer_get_mac_addr_return::static_create_type_code());
	vnx::register_type_code(::mmx::Farmer_sign_block::static_create_type_code());
	vnx::register_type_code(::mmx::Farmer_sign_block_return::static_create_type_code());
	vnx::register_type_code(::mmx::FarmerKeys::static_create_type_code());
	vnx::register_type_code(::mmx::HarvesterBase::static_create_type_code());
	vnx::register_type_code(::mmx::Harvester_get_farm_info::static_create_type_code());
	vnx::register_type_code(::mmx::Harvester_get_farm_info_return::static_create_type_code());
	vnx::register_type_code(::mmx::Harvester_get_total_bytes::static_create_type_code());
	vnx::register_type_code(::mmx::Harvester_get_total_bytes_return::static_create_type_code());
	vnx::register_type_code(::mmx::Harvester_reload::static_create_type_code());
	vnx::register_type_code(::mmx::Harvester_reload_return::static_create_type_code());
	vnx::register_type_code(::mmx::IntervalRequest::static_create_type_code());
	vnx::register_type_code(::mmx::KeyFile::static_create_type_code());
	vnx::register_type_code(::mmx::NodeBase::static_create_type_code());
	vnx::register_type_code(::mmx::Node_add_block::static_create_type_code());
	vnx::register_type_code(::mmx::Node_add_block_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_add_transaction::static_create_type_code());
	vnx::register_type_code(::mmx::Node_add_transaction_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_balance::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_balance_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_block::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_block_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_block_at::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_block_at_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_block_hash::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_block_hash_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_contract::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_contract_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_header_at::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_header_at_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_height::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_height_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_history_for::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_history_for_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_params::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_params_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_stxo_list::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_stxo_list_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_synced_height::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_synced_height_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_total_balance::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_total_balance_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_total_supply::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_total_supply_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_transaction::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_transaction_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_transactions::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_transactions_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_tx_height::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_tx_height_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_txo_info::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_txo_info_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_utxo_list::static_create_type_code());
	vnx::register_type_code(::mmx::Node_get_utxo_list_return::static_create_type_code());
	vnx::register_type_code(::mmx::Node_start_sync::static_create_type_code());
	vnx::register_type_code(::mmx::Node_start_sync_return::static_create_type_code());
	vnx::register_type_code(::mmx::Operation::static_create_type_code());
	vnx::register_type_code(::mmx::PeerInfo::static_create_type_code());
	vnx::register_type_code(::mmx::ProofOfSpace::static_create_type_code());
	vnx::register_type_code(::mmx::ProofOfTime::static_create_type_code());
	vnx::register_type_code(::mmx::ProofResponse::static_create_type_code());
	vnx::register_type_code(::mmx::Request::static_create_type_code());
	vnx::register_type_code(::mmx::Return::static_create_type_code());
	vnx::register_type_code(::mmx::RouterBase::static_create_type_code());
	vnx::register_type_code(::mmx::Router_discover::static_create_type_code());
	vnx::register_type_code(::mmx::Router_discover_return::static_create_type_code());
	vnx::register_type_code(::mmx::Router_get_blocks_at::static_create_type_code());
	vnx::register_type_code(::mmx::Router_get_blocks_at_return::static_create_type_code());
	vnx::register_type_code(::mmx::Router_get_connected_peers::static_create_type_code());
	vnx::register_type_code(::mmx::Router_get_connected_peers_return::static_create_type_code());
	vnx::register_type_code(::mmx::Router_get_id::static_create_type_code());
	vnx::register_type_code(::mmx::Router_get_id_return::static_create_type_code());
	vnx::register_type_code(::mmx::Router_get_known_peers::static_create_type_code());
	vnx::register_type_code(::mmx::Router_get_known_peers_return::static_create_type_code());
	vnx::register_type_code(::mmx::Router_get_peer_info::static_create_type_code());
	vnx::register_type_code(::mmx::Router_get_peer_info_return::static_create_type_code());
	vnx::register_type_code(::mmx::Router_get_peers::static_create_type_code());
	vnx::register_type_code(::mmx::Router_get_peers_return::static_create_type_code());
	vnx::register_type_code(::mmx::Solution::static_create_type_code());
	vnx::register_type_code(::mmx::TimeInfusion::static_create_type_code());
	vnx::register_type_code(::mmx::TimeLordBase::static_create_type_code());
	vnx::register_type_code(::mmx::TimeLord_stop_vdf::static_create_type_code());
	vnx::register_type_code(::mmx::TimeLord_stop_vdf_return::static_create_type_code());
	vnx::register_type_code(::mmx::Transaction::static_create_type_code());
	vnx::register_type_code(::mmx::WalletBase::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_address::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_address_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_all_farmer_keys::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_all_farmer_keys_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_balance::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_balance_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_farmer_keys::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_farmer_keys_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_history::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_history_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_master_seed::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_master_seed_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_stxo_list::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_stxo_list_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_stxo_list_for::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_stxo_list_for_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_utxo_list::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_utxo_list_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_utxo_list_for::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_get_utxo_list_for_return::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_send::static_create_type_code());
	vnx::register_type_code(::mmx::Wallet_send_return::static_create_type_code());
	vnx::register_type_code(::mmx::peer_info_t::static_create_type_code());
	vnx::register_type_code(::mmx::permission_e::static_create_type_code());
	vnx::register_type_code(::mmx::stxo_entry_t::static_create_type_code());
	vnx::register_type_code(::mmx::time_segment_t::static_create_type_code());
	vnx::register_type_code(::mmx::tx_entry_t::static_create_type_code());
	vnx::register_type_code(::mmx::tx_in_t::static_create_type_code());
	vnx::register_type_code(::mmx::tx_out_t::static_create_type_code());
	vnx::register_type_code(::mmx::tx_type_e::static_create_type_code());
	vnx::register_type_code(::mmx::txio_key_t::static_create_type_code());
	vnx::register_type_code(::mmx::txo_info_t::static_create_type_code());
	vnx::register_type_code(::mmx::uint_fraction_t::static_create_type_code());
	vnx::register_type_code(::mmx::ulong_fraction_t::static_create_type_code());
	vnx::register_type_code(::mmx::utxo_entry_t::static_create_type_code());
	vnx::register_type_code(::mmx::utxo_t::static_create_type_code());
}

static struct vnx_static_init {
	vnx_static_init() {
		register_all_types();
	}
} vnx_static_init_;

const vnx::TypeCode* const vnx_native_type_code_Block = vnx::get_type_code(vnx::Hash64(0x94965d816d328467ull));
const vnx::TypeCode* const vnx_native_type_code_BlockHeader = vnx::get_type_code(vnx::Hash64(0xcaae941a2fc712a6ull));
const vnx::TypeCode* const vnx_native_type_code_ChainParams = vnx::get_type_code(vnx::Hash64(0x51bba8d28881e8e7ull));
const vnx::TypeCode* const vnx_native_type_code_Challenge = vnx::get_type_code(vnx::Hash64(0x4bf49f8022405249ull));
const vnx::TypeCode* const vnx_native_type_code_Contract = vnx::get_type_code(vnx::Hash64(0x26b896ae8c415285ull));
const vnx::TypeCode* const vnx_native_type_code_FarmInfo = vnx::get_type_code(vnx::Hash64(0xa2701372b9137f0eull));
const vnx::TypeCode* const vnx_native_type_code_FarmerBase = vnx::get_type_code(vnx::Hash64(0xff732ba14d9d1abull));
const vnx::TypeCode* const vnx_native_type_code_Farmer_get_mac_addr = vnx::get_type_code(vnx::Hash64(0xe9ced9f6feb676b3ull));
const vnx::TypeCode* const vnx_native_type_code_Farmer_get_mac_addr_return = vnx::get_type_code(vnx::Hash64(0x9e4caad2ffaba990ull));
const vnx::TypeCode* const vnx_native_type_code_Farmer_sign_block = vnx::get_type_code(vnx::Hash64(0x6924b10f345eb316ull));
const vnx::TypeCode* const vnx_native_type_code_Farmer_sign_block_return = vnx::get_type_code(vnx::Hash64(0xb8acce9269f91310ull));
const vnx::TypeCode* const vnx_native_type_code_FarmerKeys = vnx::get_type_code(vnx::Hash64(0x9942f861520098b3ull));
const vnx::TypeCode* const vnx_native_type_code_HarvesterBase = vnx::get_type_code(vnx::Hash64(0xc17118896cde1555ull));
const vnx::TypeCode* const vnx_native_type_code_Harvester_get_farm_info = vnx::get_type_code(vnx::Hash64(0x129f91b9ade2891full));
const vnx::TypeCode* const vnx_native_type_code_Harvester_get_farm_info_return = vnx::get_type_code(vnx::Hash64(0x87a91b15ec42441full));
const vnx::TypeCode* const vnx_native_type_code_Harvester_get_total_bytes = vnx::get_type_code(vnx::Hash64(0x36f2104b41d9a25cull));
const vnx::TypeCode* const vnx_native_type_code_Harvester_get_total_bytes_return = vnx::get_type_code(vnx::Hash64(0xd9a9fe83ba7d6918ull));
const vnx::TypeCode* const vnx_native_type_code_Harvester_reload = vnx::get_type_code(vnx::Hash64(0xc67a4577de7e85caull));
const vnx::TypeCode* const vnx_native_type_code_Harvester_reload_return = vnx::get_type_code(vnx::Hash64(0x39fc8cc53bcf4659ull));
const vnx::TypeCode* const vnx_native_type_code_IntervalRequest = vnx::get_type_code(vnx::Hash64(0xa4e39be061f13d71ull));
const vnx::TypeCode* const vnx_native_type_code_KeyFile = vnx::get_type_code(vnx::Hash64(0xdf868931a939cba1ull));
const vnx::TypeCode* const vnx_native_type_code_NodeBase = vnx::get_type_code(vnx::Hash64(0x289d7651582d76a3ull));
const vnx::TypeCode* const vnx_native_type_code_Node_add_block = vnx::get_type_code(vnx::Hash64(0x63abca4d23f93894ull));
const vnx::TypeCode* const vnx_native_type_code_Node_add_block_return = vnx::get_type_code(vnx::Hash64(0xb6d1115db03a6d6aull));
const vnx::TypeCode* const vnx_native_type_code_Node_add_transaction = vnx::get_type_code(vnx::Hash64(0xd9782531c0e3f766ull));
const vnx::TypeCode* const vnx_native_type_code_Node_add_transaction_return = vnx::get_type_code(vnx::Hash64(0x2ded8c10e1721ba8ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_balance = vnx::get_type_code(vnx::Hash64(0x2e00172d0470479ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_balance_return = vnx::get_type_code(vnx::Hash64(0xe29d98f8f1ab3e21ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_block = vnx::get_type_code(vnx::Hash64(0xeb3fabe56dec161aull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_block_return = vnx::get_type_code(vnx::Hash64(0x6d9abdbf20c4b4d2ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_block_at = vnx::get_type_code(vnx::Hash64(0xc69c9f876a00e48full));
const vnx::TypeCode* const vnx_native_type_code_Node_get_block_at_return = vnx::get_type_code(vnx::Hash64(0x6e3c22a7391c5491ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_block_hash = vnx::get_type_code(vnx::Hash64(0x43c5087066b73f38ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_block_hash_return = vnx::get_type_code(vnx::Hash64(0x47877c5597b978dfull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_contract = vnx::get_type_code(vnx::Hash64(0xa28704c65a67a293ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_contract_return = vnx::get_type_code(vnx::Hash64(0x314d0901de362f8cull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_header_at = vnx::get_type_code(vnx::Hash64(0x52658163d8767c79ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_header_at_return = vnx::get_type_code(vnx::Hash64(0x4efc6897885ee521ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_height = vnx::get_type_code(vnx::Hash64(0x55f0d4ef7a117716ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_height_return = vnx::get_type_code(vnx::Hash64(0x5fb0ff1e11add033ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_history_for = vnx::get_type_code(vnx::Hash64(0x61588fcbc5a50893ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_history_for_return = vnx::get_type_code(vnx::Hash64(0x9b39b74d62dd7f9ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_params = vnx::get_type_code(vnx::Hash64(0x6384b34900c2e465ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_params_return = vnx::get_type_code(vnx::Hash64(0xd0a614f2ed037180ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_stxo_list = vnx::get_type_code(vnx::Hash64(0xb4e1314236d07ca2ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_stxo_list_return = vnx::get_type_code(vnx::Hash64(0x40ee223f3546f2a7ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_synced_height = vnx::get_type_code(vnx::Hash64(0xc4fb44ec3d1a8bb7ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_synced_height_return = vnx::get_type_code(vnx::Hash64(0xd466ce92d1bbe9dbull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_total_balance = vnx::get_type_code(vnx::Hash64(0x91e9019d224db4b0ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_total_balance_return = vnx::get_type_code(vnx::Hash64(0x3336380a894f52a8ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_total_supply = vnx::get_type_code(vnx::Hash64(0x17d971db6900bd9dull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_total_supply_return = vnx::get_type_code(vnx::Hash64(0xe69f15a0766eaf27ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_transaction = vnx::get_type_code(vnx::Hash64(0x9c76ca142292750full));
const vnx::TypeCode* const vnx_native_type_code_Node_get_transaction_return = vnx::get_type_code(vnx::Hash64(0x3848f078ff4024dull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_transactions = vnx::get_type_code(vnx::Hash64(0x715a5bb668426203ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_transactions_return = vnx::get_type_code(vnx::Hash64(0xd11c40a507abaaaull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_tx_height = vnx::get_type_code(vnx::Hash64(0xf6f917fad9361e3aull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_tx_height_return = vnx::get_type_code(vnx::Hash64(0xda69a0d06f4b5c3eull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_txo_info = vnx::get_type_code(vnx::Hash64(0xd9d0be3b95e67d52ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_txo_info_return = vnx::get_type_code(vnx::Hash64(0xec5afeac062fef38ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_utxo_list = vnx::get_type_code(vnx::Hash64(0x7f52e1aa01c66023ull));
const vnx::TypeCode* const vnx_native_type_code_Node_get_utxo_list_return = vnx::get_type_code(vnx::Hash64(0xb64b283378c24f70ull));
const vnx::TypeCode* const vnx_native_type_code_Node_start_sync = vnx::get_type_code(vnx::Hash64(0x6c5be8aeb25ef3c8ull));
const vnx::TypeCode* const vnx_native_type_code_Node_start_sync_return = vnx::get_type_code(vnx::Hash64(0xe75b8e6a62d7e744ull));
const vnx::TypeCode* const vnx_native_type_code_Operation = vnx::get_type_code(vnx::Hash64(0xfd69dd82e906e619ull));
const vnx::TypeCode* const vnx_native_type_code_PeerInfo = vnx::get_type_code(vnx::Hash64(0xf7a37f624c94a121ull));
const vnx::TypeCode* const vnx_native_type_code_ProofOfSpace = vnx::get_type_code(vnx::Hash64(0x9269760ad5fd0058ull));
const vnx::TypeCode* const vnx_native_type_code_ProofOfTime = vnx::get_type_code(vnx::Hash64(0xa84a63942b8e5c6aull));
const vnx::TypeCode* const vnx_native_type_code_ProofResponse = vnx::get_type_code(vnx::Hash64(0x816e898b36befae0ull));
const vnx::TypeCode* const vnx_native_type_code_Request = vnx::get_type_code(vnx::Hash64(0x110ce6958669f66bull));
const vnx::TypeCode* const vnx_native_type_code_Return = vnx::get_type_code(vnx::Hash64(0xb479dce669278664ull));
const vnx::TypeCode* const vnx_native_type_code_RouterBase = vnx::get_type_code(vnx::Hash64(0x952c4ef2956f31c4ull));
const vnx::TypeCode* const vnx_native_type_code_Router_discover = vnx::get_type_code(vnx::Hash64(0xeda51767d96e246cull));
const vnx::TypeCode* const vnx_native_type_code_Router_discover_return = vnx::get_type_code(vnx::Hash64(0xb4e47e012f264f94ull));
const vnx::TypeCode* const vnx_native_type_code_Router_get_blocks_at = vnx::get_type_code(vnx::Hash64(0x1eb0c0d7eae3c33aull));
const vnx::TypeCode* const vnx_native_type_code_Router_get_blocks_at_return = vnx::get_type_code(vnx::Hash64(0x70f0e9e7aa72b810ull));
const vnx::TypeCode* const vnx_native_type_code_Router_get_connected_peers = vnx::get_type_code(vnx::Hash64(0x8682feb65fbb77feull));
const vnx::TypeCode* const vnx_native_type_code_Router_get_connected_peers_return = vnx::get_type_code(vnx::Hash64(0x5c96b95e03d32e32ull));
const vnx::TypeCode* const vnx_native_type_code_Router_get_id = vnx::get_type_code(vnx::Hash64(0xb9f7168b5ae94cd9ull));
const vnx::TypeCode* const vnx_native_type_code_Router_get_id_return = vnx::get_type_code(vnx::Hash64(0x3924146b7a803806ull));
const vnx::TypeCode* const vnx_native_type_code_Router_get_known_peers = vnx::get_type_code(vnx::Hash64(0xaa408b6bf4e8168dull));
const vnx::TypeCode* const vnx_native_type_code_Router_get_known_peers_return = vnx::get_type_code(vnx::Hash64(0xc08cde4fbf7f2abcull));
const vnx::TypeCode* const vnx_native_type_code_Router_get_peer_info = vnx::get_type_code(vnx::Hash64(0x520a467ef9324cb3ull));
const vnx::TypeCode* const vnx_native_type_code_Router_get_peer_info_return = vnx::get_type_code(vnx::Hash64(0xffff4ae0244281b5ull));
const vnx::TypeCode* const vnx_native_type_code_Router_get_peers = vnx::get_type_code(vnx::Hash64(0x66d68bd91b462049ull));
const vnx::TypeCode* const vnx_native_type_code_Router_get_peers_return = vnx::get_type_code(vnx::Hash64(0x595714f80f272d86ull));
const vnx::TypeCode* const vnx_native_type_code_Solution = vnx::get_type_code(vnx::Hash64(0x9f693babd1a91ccdull));
const vnx::TypeCode* const vnx_native_type_code_TimeInfusion = vnx::get_type_code(vnx::Hash64(0x7c38bc7150b0d98bull));
const vnx::TypeCode* const vnx_native_type_code_TimeLordBase = vnx::get_type_code(vnx::Hash64(0x311081636f6570efull));
const vnx::TypeCode* const vnx_native_type_code_TimeLord_stop_vdf = vnx::get_type_code(vnx::Hash64(0xf7f78eb9f371e6e7ull));
const vnx::TypeCode* const vnx_native_type_code_TimeLord_stop_vdf_return = vnx::get_type_code(vnx::Hash64(0x53e37fb500ea3a9full));
const vnx::TypeCode* const vnx_native_type_code_Transaction = vnx::get_type_code(vnx::Hash64(0xce0462acdceaa5bcull));
const vnx::TypeCode* const vnx_native_type_code_WalletBase = vnx::get_type_code(vnx::Hash64(0x62207fd96d3aead7ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_address = vnx::get_type_code(vnx::Hash64(0xccad8dfe1543aa77ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_address_return = vnx::get_type_code(vnx::Hash64(0x4c76a08d8d85c4e4ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_all_farmer_keys = vnx::get_type_code(vnx::Hash64(0xc6a03b3f813d071dull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_all_farmer_keys_return = vnx::get_type_code(vnx::Hash64(0xa2de9b0aaffc515aull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_balance = vnx::get_type_code(vnx::Hash64(0x1bc2c2dd67ab2829ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_balance_return = vnx::get_type_code(vnx::Hash64(0xfa00e6f62563141full));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_farmer_keys = vnx::get_type_code(vnx::Hash64(0x44709e11ff3ff3eeull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_farmer_keys_return = vnx::get_type_code(vnx::Hash64(0x25479f868269fbb0ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_history = vnx::get_type_code(vnx::Hash64(0x921f73f3d97d2d4dull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_history_return = vnx::get_type_code(vnx::Hash64(0xb1b8c9a446a81b1full));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_master_seed = vnx::get_type_code(vnx::Hash64(0x8fddd77ece4d295bull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_master_seed_return = vnx::get_type_code(vnx::Hash64(0x8b0f38e742e132f0ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_stxo_list = vnx::get_type_code(vnx::Hash64(0x62f2ba31c40eed7full));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_stxo_list_return = vnx::get_type_code(vnx::Hash64(0xa0bdc240bd749ddeull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_stxo_list_for = vnx::get_type_code(vnx::Hash64(0xf1a2de0ec45bc8ecull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_stxo_list_for_return = vnx::get_type_code(vnx::Hash64(0x8b4cfd0ced61d756ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_utxo_list = vnx::get_type_code(vnx::Hash64(0xa9416ad9f318f1feull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_utxo_list_return = vnx::get_type_code(vnx::Hash64(0x5618c84cf0f02009ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_utxo_list_for = vnx::get_type_code(vnx::Hash64(0x8b3f02747642c28dull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_get_utxo_list_for_return = vnx::get_type_code(vnx::Hash64(0x4f192259e2b73057ull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_send = vnx::get_type_code(vnx::Hash64(0x3842658ae3c2d5ebull));
const vnx::TypeCode* const vnx_native_type_code_Wallet_send_return = vnx::get_type_code(vnx::Hash64(0x5df7b911342a1e6full));
const vnx::TypeCode* const vnx_native_type_code_peer_info_t = vnx::get_type_code(vnx::Hash64(0xce0ff32e89625afbull));
const vnx::TypeCode* const vnx_native_type_code_permission_e = vnx::get_type_code(vnx::Hash64(0x7d75a3f04c313898ull));
const vnx::TypeCode* const vnx_native_type_code_stxo_entry_t = vnx::get_type_code(vnx::Hash64(0x7655c1e23969201bull));
const vnx::TypeCode* const vnx_native_type_code_time_segment_t = vnx::get_type_code(vnx::Hash64(0x344b7baf0798fe2aull));
const vnx::TypeCode* const vnx_native_type_code_tx_entry_t = vnx::get_type_code(vnx::Hash64(0x438cda5719015870ull));
const vnx::TypeCode* const vnx_native_type_code_tx_in_t = vnx::get_type_code(vnx::Hash64(0xd9253957c5a57cd5ull));
const vnx::TypeCode* const vnx_native_type_code_tx_out_t = vnx::get_type_code(vnx::Hash64(0xff8d7b37bd8c3a07ull));
const vnx::TypeCode* const vnx_native_type_code_tx_type_e = vnx::get_type_code(vnx::Hash64(0x3b7f577c2cfd4c91ull));
const vnx::TypeCode* const vnx_native_type_code_txio_key_t = vnx::get_type_code(vnx::Hash64(0xfc88d5457510e2a5ull));
const vnx::TypeCode* const vnx_native_type_code_txo_info_t = vnx::get_type_code(vnx::Hash64(0x41e366a847ba3fb4ull));
const vnx::TypeCode* const vnx_native_type_code_uint_fraction_t = vnx::get_type_code(vnx::Hash64(0xe5632136b5a3ed5aull));
const vnx::TypeCode* const vnx_native_type_code_ulong_fraction_t = vnx::get_type_code(vnx::Hash64(0xe9c2388a9c35ce06ull));
const vnx::TypeCode* const vnx_native_type_code_utxo_entry_t = vnx::get_type_code(vnx::Hash64(0xa992908400336c9aull));
const vnx::TypeCode* const vnx_native_type_code_utxo_t = vnx::get_type_code(vnx::Hash64(0xb698d425571f5729ull));

} // namespace mmx
