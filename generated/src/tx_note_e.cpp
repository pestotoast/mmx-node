
// AUTO GENERATED by vnxcppcodegen

#include <mmx/package.hxx>
#include <mmx/tx_note_e.hxx>

#include <vnx/vnx.h>


namespace mmx {


const vnx::Hash64 tx_note_e::VNX_TYPE_HASH(0x347c1deca0a9c9cull);
const vnx::Hash64 tx_note_e::VNX_CODE_HASH(0x7425037e9dfb4897ull);

vnx::Hash64 tx_note_e::get_type_hash() const {
	return VNX_TYPE_HASH;
}

std::string tx_note_e::get_type_name() const {
	return "mmx.tx_note_e";
}

const vnx::TypeCode* tx_note_e::get_type_code() const {
	return mmx::vnx_native_type_code_tx_note_e;
}

std::shared_ptr<tx_note_e> tx_note_e::create() {
	return std::make_shared<tx_note_e>();
}

std::shared_ptr<tx_note_e> tx_note_e::clone() const {
	return std::make_shared<tx_note_e>(*this);
}

void tx_note_e::read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code) {
	vnx::read(_in, *this, _type_code, _code);
}

void tx_note_e::write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const {
	vnx::write(_out, *this, _type_code, _code);
}

vnx::bool_t tx_note_e::is_valid() const {
	switch(value) {
		case BURN: return true;
		case CLAIM: return true;
		case DEPLOY: return true;
		case MINT: return true;
		case MUTATE: return true;
		case OFFER: return true;
		case OTHER: return true;
		case REWARD: return true;
		case SPLIT: return true;
		case TRADE: return true;
		case TRANSFER: return true;
		case WITHDRAW: return true;
	}
	return false;
}

std::string tx_note_e::to_string() const {
	switch(value) {
		case BURN: return "\"BURN\"";
		case CLAIM: return "\"CLAIM\"";
		case DEPLOY: return "\"DEPLOY\"";
		case MINT: return "\"MINT\"";
		case MUTATE: return "\"MUTATE\"";
		case OFFER: return "\"OFFER\"";
		case OTHER: return "\"OTHER\"";
		case REWARD: return "\"REWARD\"";
		case SPLIT: return "\"SPLIT\"";
		case TRADE: return "\"TRADE\"";
		case TRANSFER: return "\"TRANSFER\"";
		case WITHDRAW: return "\"WITHDRAW\"";
	}
	return std::to_string(value);
}

std::string tx_note_e::to_string_value() const {
	switch(value) {
		case BURN: return "BURN";
		case CLAIM: return "CLAIM";
		case DEPLOY: return "DEPLOY";
		case MINT: return "MINT";
		case MUTATE: return "MUTATE";
		case OFFER: return "OFFER";
		case OTHER: return "OTHER";
		case REWARD: return "REWARD";
		case SPLIT: return "SPLIT";
		case TRADE: return "TRADE";
		case TRANSFER: return "TRANSFER";
		case WITHDRAW: return "WITHDRAW";
	}
	return std::to_string(value);
}

std::string tx_note_e::to_string_value_full() const {
	switch(value) {
		case BURN: return "mmx.tx_note_e.BURN";
		case CLAIM: return "mmx.tx_note_e.CLAIM";
		case DEPLOY: return "mmx.tx_note_e.DEPLOY";
		case MINT: return "mmx.tx_note_e.MINT";
		case MUTATE: return "mmx.tx_note_e.MUTATE";
		case OFFER: return "mmx.tx_note_e.OFFER";
		case OTHER: return "mmx.tx_note_e.OTHER";
		case REWARD: return "mmx.tx_note_e.REWARD";
		case SPLIT: return "mmx.tx_note_e.SPLIT";
		case TRADE: return "mmx.tx_note_e.TRADE";
		case TRANSFER: return "mmx.tx_note_e.TRANSFER";
		case WITHDRAW: return "mmx.tx_note_e.WITHDRAW";
	}
	return std::to_string(value);
}

void tx_note_e::from_string(const std::string& _str) {
	std::string _name;
	vnx::from_string(_str, _name);
	from_string_value(_name);
}

void tx_note_e::from_string_value(const std::string& _name) {
	vnx::Variant var;
	vnx::from_string_value(_name, var);
	if(var.is_string()) {
		if(_name == "BURN") value = BURN;
		else if(_name == "CLAIM") value = CLAIM;
		else if(_name == "DEPLOY") value = DEPLOY;
		else if(_name == "MINT") value = MINT;
		else if(_name == "MUTATE") value = MUTATE;
		else if(_name == "OFFER") value = OFFER;
		else if(_name == "OTHER") value = OTHER;
		else if(_name == "REWARD") value = REWARD;
		else if(_name == "SPLIT") value = SPLIT;
		else if(_name == "TRADE") value = TRADE;
		else if(_name == "TRANSFER") value = TRANSFER;
		else if(_name == "WITHDRAW") value = WITHDRAW;
		else value = enum_t(vnx::hash64(_name));
	} else {
		value = enum_t(std::stoul(_name.c_str(), nullptr, 0));
	}
}

void tx_note_e::accept(vnx::Visitor& _visitor) const {
	std::string _name;
	switch(value) {
		case BURN: _name = "BURN"; break;
		case CLAIM: _name = "CLAIM"; break;
		case DEPLOY: _name = "DEPLOY"; break;
		case MINT: _name = "MINT"; break;
		case MUTATE: _name = "MUTATE"; break;
		case OFFER: _name = "OFFER"; break;
		case OTHER: _name = "OTHER"; break;
		case REWARD: _name = "REWARD"; break;
		case SPLIT: _name = "SPLIT"; break;
		case TRADE: _name = "TRADE"; break;
		case TRANSFER: _name = "TRANSFER"; break;
		case WITHDRAW: _name = "WITHDRAW"; break;
	}
	_visitor.enum_value(value, _name);
}

void tx_note_e::write(std::ostream& _out) const {
	switch(value) {
		case BURN: _out << "\"BURN\""; break;
		case CLAIM: _out << "\"CLAIM\""; break;
		case DEPLOY: _out << "\"DEPLOY\""; break;
		case MINT: _out << "\"MINT\""; break;
		case MUTATE: _out << "\"MUTATE\""; break;
		case OFFER: _out << "\"OFFER\""; break;
		case OTHER: _out << "\"OTHER\""; break;
		case REWARD: _out << "\"REWARD\""; break;
		case SPLIT: _out << "\"SPLIT\""; break;
		case TRADE: _out << "\"TRADE\""; break;
		case TRANSFER: _out << "\"TRANSFER\""; break;
		case WITHDRAW: _out << "\"WITHDRAW\""; break;
		default: _out << value;
	}
}

void tx_note_e::read(std::istream& _in) {
	from_string_value(vnx::read(_in).to_string_value());
}

vnx::Object tx_note_e::to_object() const {
	vnx::Object _object;
	_object["__type"] = "mmx.tx_note_e";
	_object["value"] = value;
	return _object;
}

void tx_note_e::from_object(const vnx::Object& _object) {
	for(const auto& _entry : _object.field) {
		if(_entry.first == "value") {
			_entry.second.to(value);
		}
	}
}

vnx::Variant tx_note_e::get_field(const std::string& _name) const {
	if(_name == "value") {
		return vnx::Variant(value);
	}
	return vnx::Variant();
}

void tx_note_e::set_field(const std::string& _name, const vnx::Variant& _value) {
	if(_name == "value") {
		_value.to(value);
	}
}

/// \private
std::ostream& operator<<(std::ostream& _out, const tx_note_e& _value) {
	_value.write(_out);
	return _out;
}

/// \private
std::istream& operator>>(std::istream& _in, tx_note_e& _value) {
	_value.read(_in);
	return _in;
}

const vnx::TypeCode* tx_note_e::static_get_type_code() {
	const vnx::TypeCode* type_code = vnx::get_type_code(VNX_TYPE_HASH);
	if(!type_code) {
		type_code = vnx::register_type_code(static_create_type_code());
	}
	return type_code;
}

std::shared_ptr<vnx::TypeCode> tx_note_e::static_create_type_code() {
	auto type_code = std::make_shared<vnx::TypeCode>();
	type_code->name = "mmx.tx_note_e";
	type_code->type_hash = vnx::Hash64(0x347c1deca0a9c9cull);
	type_code->code_hash = vnx::Hash64(0x7425037e9dfb4897ull);
	type_code->is_native = true;
	type_code->is_enum = true;
	type_code->native_size = sizeof(::mmx::tx_note_e);
	type_code->create_value = []() -> std::shared_ptr<vnx::Value> { return std::make_shared<vnx::Struct<tx_note_e>>(); };
	type_code->fields.resize(1);
	{
		auto& field = type_code->fields[0];
		field.data_size = 4;
		field.name = "value";
		field.code = {3};
	}
	type_code->enum_map[1273454750] = "BURN";
	type_code->enum_map[3251493825] = "CLAIM";
	type_code->enum_map[251696509] = "DEPLOY";
	type_code->enum_map[2140500429] = "MINT";
	type_code->enum_map[2579166487] = "MUTATE";
	type_code->enum_map[1549148948] = "OFFER";
	type_code->enum_map[3605757838] = "OTHER";
	type_code->enum_map[3842121424] = "REWARD";
	type_code->enum_map[1454128272] = "SPLIT";
	type_code->enum_map[329618288] = "TRADE";
	type_code->enum_map[858544509] = "TRANSFER";
	type_code->enum_map[4266232802] = "WITHDRAW";
	type_code->build();
	return type_code;
}


} // namespace mmx


namespace vnx {

void read(TypeInput& in, ::mmx::tx_note_e& value, const TypeCode* type_code, const uint16_t* code) {
	if(code) {
		switch(code[0]) {
			case CODE_OBJECT:
			case CODE_ALT_OBJECT: {
				Object tmp;
				vnx::read(in, tmp, type_code, code);
				value.from_object(tmp);
				return;
			}
			case CODE_DYNAMIC:
			case CODE_ALT_DYNAMIC:
				vnx::read_dynamic(in, value);
				return;
		}
	}
	if(!type_code) {
		Variant tmp;
		vnx::read(in, tmp, type_code, code);
		if(tmp.is_string()) {
			vnx::from_string(tmp.to_string(), value);
		} else if(tmp.is_ulong()) {
			value = ::mmx::tx_note_e::enum_t(tmp.to<uint32_t>());
		} else {
			value = ::mmx::tx_note_e();
		}
		return;
	}
	if(code) {
		switch(code[0]) {
			case CODE_STRUCT: type_code = type_code->depends[code[1]]; break;
			case CODE_ALT_STRUCT: type_code = type_code->depends[vnx::flip_bytes(code[1])]; break;
			default: {
				vnx::skip(in, type_code, code);
				return;
			}
		}
	}
	const char* const _buf = in.read(type_code->total_field_size);
	if(type_code->is_matched) {
		if(const auto* const _field = type_code->field_map[0]) {
			vnx::read_value(_buf + _field->offset, value.value, _field->code.data());
		}
	}
	for(const auto* _field : type_code->ext_fields) {
		switch(_field->native_index) {
			default: vnx::skip(in, type_code, _field->code.data());
		}
	}
}

void write(TypeOutput& out, const ::mmx::tx_note_e& value, const TypeCode* type_code, const uint16_t* code) {
	if(code && code[0] == CODE_STRING) {
		vnx::write(out, value.to_string_value(), nullptr, code);
		return;
	}
	if(code && code[0] == CODE_UINT32) {
		vnx::write(out, value.value, nullptr, code);
		return;
	}
	if(!type_code || (code && code[0] == CODE_ANY)) {
		type_code = mmx::vnx_native_type_code_tx_note_e;
		out.write_type_code(type_code);
		vnx::write_class_header<::mmx::tx_note_e>(out);
	}
	else if(code && code[0] == CODE_STRUCT) {
		type_code = type_code->depends[code[1]];
	}
	char* const _buf = out.write(4);
	vnx::write_value(_buf + 0, value.value);
}

void read(std::istream& in, ::mmx::tx_note_e& value) {
	value.read(in);
}

void write(std::ostream& out, const ::mmx::tx_note_e& value) {
	value.write(out);
}

void accept(Visitor& visitor, const ::mmx::tx_note_e& value) {
	value.accept(visitor);
}

void read(TypeInput& in, ::mmx::tx_note_e::enum_t& value, const TypeCode* type_code, const uint16_t* code) {
	uint32_t tmp = 0;
	vnx::read(in, tmp, type_code, code);
	value = ::mmx::tx_note_e::enum_t(tmp);
}

void write(TypeOutput& out, const ::mmx::tx_note_e::enum_t& value, const TypeCode* type_code, const uint16_t* code) {
	vnx::write(out, uint32_t(value), type_code, code);
}

template<>
std::string to_string(const ::mmx::tx_note_e& _value) {
	return _value.to_string();
}

template<>
std::string to_string_value(const ::mmx::tx_note_e& _value) {
	return _value.to_string_value();
}

template<>
std::string to_string_value_full(const ::mmx::tx_note_e& _value) {
	return _value.to_string_value_full();
}

template<>
std::string to_string(const ::mmx::tx_note_e::enum_t& _value) {
	return ::mmx::tx_note_e(_value).to_string();
}

template<>
std::string to_string_value(const ::mmx::tx_note_e::enum_t& _value) {
	return ::mmx::tx_note_e(_value).to_string_value();
}

template<>
std::string to_string_value_full(const ::mmx::tx_note_e::enum_t& _value) {
	return ::mmx::tx_note_e(_value).to_string_value_full();
}

bool is_equivalent<::mmx::tx_note_e>::operator()(const uint16_t* code, const TypeCode* type_code) {
	if(code[0] != CODE_STRUCT || !type_code) {
		return false;
	}
	type_code = type_code->depends[code[1]];
	return type_code->type_hash == ::mmx::tx_note_e::VNX_TYPE_HASH && type_code->is_equivalent;
}

} // vnx
