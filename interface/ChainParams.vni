package mmx;

class ChainParams {
	
	uint port;
	int  decimals = 6;
	uint min_ksize = 30;
	uint max_ksize = 42;
	uint plot_filter = 10;
	
	uint commit_delay = 18;					// for writing to disk (must > finality_delay)
	// TODO: rename to infuse_delay
	uint finality_delay = 6;				// for primary VDF infusion (must be > 0)
	uint challenge_delay = 9;				// blocks until new challange is active (must be > 0)
	uint challenge_interval = 48;			// challenge (and difficulty) is for next N blocks (must be > commit_delay)
	uint max_diff_adjust = 10;				// per block (1/2^x)
	
	uint min_vdf_segments = 320;
	uint num_vdf_segments = 760;
	uint max_vdf_segments = 1024;

	uint max_tx_base_out = 10;
	uint recursive_interval = 60480;		// number of blocks per iteration to approximate recursive functions
	
	uint score_bits = 16;
	uint score_target = 8192;				// defines how many competing blocks are created (must be less than score_threshold)
	uint score_threshold = 65536;			// should be <= 2^score_bits
	uint max_weight_buffer = 262144;
	
	ulong min_reward = 200000;
	ulong_fraction_t reward_factor;			// reward = (diff * value) / inverse;
	
	ulong time_diff_constant = 1000;
	ulong space_diff_constant = 100000000;
	
	ulong initial_time_diff = 10000;		// [iters/sec]
	ulong initial_space_diff = 10;
	
	ulong min_txfee_io = 100;				// per input / output
	ulong min_txfee_sign = 1000;			// per solution
	ulong min_txfee_exec = 10000;			// per contract operation
	ulong min_txfee_byte = 10;				// per byte of data
	ulong max_block_cost = 10000000;
	
	double block_time = 10;					// [sec]
	double orphan_delay = 1;				// [sec]
	
	string vdf_seed;
	
}
