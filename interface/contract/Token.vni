package mmx.contract;

import mmx.hash_t;
import mmx.addr_t;
import mmx.ulong_fraction_t;
import mmx.Solution;
import mmx.Contract;

class Token extends Contract {
	
	string name;
	
	string symbol;
	
	string web_url;
	
	string icon_url;
	
	uint decimals;
	
	optional<addr_t> owner;
	
	optional<ulong_fraction_t> time_factor;					// for inflation / deflation (factor applied per block)
	
	map<addr_t, ulong_fraction_t> stake_factors;			// [currency => mint factor per block]
	
	bool is_mintable = true;
	
	bool is_adjustable = false;								// if time_factor and stake_factors is adjustable by owner
	
	
	bool is_valid() const;
	
	hash_t calc_hash() const;
	
	ulong calc_cost(mmx.ChainParams* params) const;
	
	vector<addr_t> get_dependency() const;
	
	vector<addr_t> get_parties() const;
	
	optional<addr_t> get_owner() const;
	
	vector<mmx.tx_out_t> validate(mmx.Operation* operation, mmx.Context* context) const;
	
	void transfer(optional<addr_t> new_owner);
	
	void set_time_factor(optional<ulong_fraction_t> factor);
	
	void set_stake_factor(addr_t currency, optional<ulong_fraction_t> factor);
	
}
